
Basics: Aggregation, filtering, limits
======================================

Now that you have ibis installed and connecting to your Impala, let's
get our feet wet.

.. code:: python

    import ibis
    import os
    hdfs_port = os.environ.get('IBIS_WEBHDFS_PORT', 50070)
    
    ic = ibis.impala_connect(host='quickstart.cloudera', database='ibis_testing')
    hdfs = ibis.hdfs_connect(host='quickstart.cloudera', port=hdfs_port)
    con = ibis.make_client(ic, hdfs_client=hdfs)

Accessing an Impala table
=========================

The optional ``database`` paramter allows to fully qualify the table.

.. code:: python

    table = con.table('functional_alltypes')
    table = con.table('functional_alltypes', database='ibis_testing')

Column selection and basic expressions
======================================

Selecting columns from a table works just like pandas

.. code:: python

    col = table.double_col
    
    # alternately
    col2 = table['bigint_col']

Table columns are equipped with a variety of math operations and other
methods to assist in writing your analytics. For example:

.. code:: python

    expr = col.log2() - 1

Some operations transform arrays to arrays, while others aggregate, like
``sum`` and ``mean``:

.. code:: python

    expr2 = expr.sum()

The methods that are available on columns depend on the time of the
column. For example, you won't see the ``substr`` or ``upper`` methods
for strings on numeric columns:

.. code:: python

    substr_expr = table.string_col.upper().substr(0, 2)

Notice that printing the expressions to the console does not actually do
anything, and shows a graphical representation of the expression you've
built.

**Note: don't worry too much about the details of the expression tree
that's outputted, it's very likely to change over time**

.. code:: python

    expr2




.. parsed-literal::

    ref_0
    DatabaseTable[table]
      name: ibis_testing.`functional_alltypes`
      schema:
        id : int32
        bool_col : boolean
        tinyint_col : int8
        smallint_col : int16
        int_col : int32
        bigint_col : int64
        float_col : float
        double_col : double
        date_string_col : string
        string_col : string
        timestamp_col : timestamp
        year : int32
        month : int32
    
    sum = Sum[double]
      Subtract[array(double)]
        Log2[array(double)]
          double_col = Column[double] 'double_col' from table ref_0
        Literal[int8]
          1
      None



We can also execute an expression by calling ``execute`` on the Impala
connection object

.. code:: python

    con.execute(col.sum())




.. parsed-literal::

    331785.0



There's a shortcut to make this a little more convenient in interactive
use

Interactive mode
================

Many Ibis expressions can be immediately executed against the database,
and it may improve your productivity to have the executed for you
whenever you try to print the expression in the console / IPython
notebook.

To do this, we have an *interactive* mode available, which can be turned
on/off like so:

.. code:: python

    ibis.options.interactive = True

Now, any expressions you write will be executed right away

.. code:: python

    table.limit(10)




.. parsed-literal::

            id bool_col  tinyint_col  smallint_col  int_col  bigint_col  \
    0     4550     True            0             0        0           0   
    1     4551    False            1             1        1          10   
    2     4552     True            2             2        2          20   
    3     4553    False            3             3        3          30   
    4     4554     True            4             4        4          40   
    5     4555    False            5             5        5          50   
    6     4556     True            6             6        6          60   
    7     4557    False            7             7        7          70   
    8     4558     True            8             8        8          80   
    9     4559    False            9             9        9          90   
    10    4560     True            0             0        0           0   
    11    4561    False            1             1        1          10   
    12    4562     True            2             2        2          20   
    13    4563    False            3             3        3          30   
    14    4564     True            4             4        4          40   
    15    4565    False            5             5        5          50   
    16    4566     True            6             6        6          60   
    17    4567    False            7             7        7          70   
    18    4568     True            8             8        8          80   
    19    4569    False            9             9        9          90   
    20    4570     True            0             0        0           0   
    21    4571    False            1             1        1          10   
    22    4572     True            2             2        2          20   
    23    4573    False            3             3        3          30   
    24    4574     True            4             4        4          40   
    25    4575    False            5             5        5          50   
    26    4576     True            6             6        6          60   
    27    4577    False            7             7        7          70   
    28    4578     True            8             8        8          80   
    29    4579    False            9             9        9          90   
    ...    ...      ...          ...           ...      ...         ...   
    7270  3620     True            0             0        0           0   
    7271  3621    False            1             1        1          10   
    7272  3622     True            2             2        2          20   
    7273  3623    False            3             3        3          30   
    7274  3624     True            4             4        4          40   
    7275  3625    False            5             5        5          50   
    7276  3626     True            6             6        6          60   
    7277  3627    False            7             7        7          70   
    7278  3628     True            8             8        8          80   
    7279  3629    False            9             9        9          90   
    7280  3630     True            0             0        0           0   
    7281  3631    False            1             1        1          10   
    7282  3632     True            2             2        2          20   
    7283  3633    False            3             3        3          30   
    7284  3634     True            4             4        4          40   
    7285  3635    False            5             5        5          50   
    7286  3636     True            6             6        6          60   
    7287  3637    False            7             7        7          70   
    7288  3638     True            8             8        8          80   
    7289  3639    False            9             9        9          90   
    7290  3640     True            0             0        0           0   
    7291  3641    False            1             1        1          10   
    7292  3642     True            2             2        2          20   
    7293  3643    False            3             3        3          30   
    7294  3644     True            4             4        4          40   
    7295  3645    False            5             5        5          50   
    7296  3646     True            6             6        6          60   
    7297  3647    False            7             7        7          70   
    7298  3648     True            8             8        8          80   
    7299  3649    False            9             9        9          90   
    
          float_col  double_col date_string_col string_col  \
    0           0.0         0.0        04/01/10          0   
    1           1.1        10.1        04/01/10          1   
    2           2.2        20.2        04/01/10          2   
    3           3.3        30.3        04/01/10          3   
    4           4.4        40.4        04/01/10          4   
    5           5.5        50.5        04/01/10          5   
    6           6.6        60.6        04/01/10          6   
    7           7.7        70.7        04/01/10          7   
    8           8.8        80.8        04/01/10          8   
    9           9.9        90.9        04/01/10          9   
    10          0.0         0.0        04/02/10          0   
    11          1.1        10.1        04/02/10          1   
    12          2.2        20.2        04/02/10          2   
    13          3.3        30.3        04/02/10          3   
    14          4.4        40.4        04/02/10          4   
    15          5.5        50.5        04/02/10          5   
    16          6.6        60.6        04/02/10          6   
    17          7.7        70.7        04/02/10          7   
    18          8.8        80.8        04/02/10          8   
    19          9.9        90.9        04/02/10          9   
    20          0.0         0.0        04/03/10          0   
    21          1.1        10.1        04/03/10          1   
    22          2.2        20.2        04/03/10          2   
    23          3.3        30.3        04/03/10          3   
    24          4.4        40.4        04/03/10          4   
    25          5.5        50.5        04/03/10          5   
    26          6.6        60.6        04/03/10          6   
    27          7.7        70.7        04/03/10          7   
    28          8.8        80.8        04/03/10          8   
    29          9.9        90.9        04/03/10          9   
    ...         ...         ...             ...        ...   
    7270        0.0         0.0        12/29/09          0   
    7271        1.1        10.1        12/29/09          1   
    7272        2.2        20.2        12/29/09          2   
    7273        3.3        30.3        12/29/09          3   
    7274        4.4        40.4        12/29/09          4   
    7275        5.5        50.5        12/29/09          5   
    7276        6.6        60.6        12/29/09          6   
    7277        7.7        70.7        12/29/09          7   
    7278        8.8        80.8        12/29/09          8   
    7279        9.9        90.9        12/29/09          9   
    7280        0.0         0.0        12/30/09          0   
    7281        1.1        10.1        12/30/09          1   
    7282        2.2        20.2        12/30/09          2   
    7283        3.3        30.3        12/30/09          3   
    7284        4.4        40.4        12/30/09          4   
    7285        5.5        50.5        12/30/09          5   
    7286        6.6        60.6        12/30/09          6   
    7287        7.7        70.7        12/30/09          7   
    7288        8.8        80.8        12/30/09          8   
    7289        9.9        90.9        12/30/09          9   
    7290        0.0         0.0        12/31/09          0   
    7291        1.1        10.1        12/31/09          1   
    7292        2.2        20.2        12/31/09          2   
    7293        3.3        30.3        12/31/09          3   
    7294        4.4        40.4        12/31/09          4   
    7295        5.5        50.5        12/31/09          5   
    7296        6.6        60.6        12/31/09          6   
    7297        7.7        70.7        12/31/09          7   
    7298        8.8        80.8        12/31/09          8   
    7299        9.9        90.9        12/31/09          9   
    
                   timestamp_col  year  month  
    0    2010-04-01 00:00:00.000  2010      4  
    1    2010-04-01 00:01:00.000  2010      4  
    2    2010-04-01 00:02:00.100  2010      4  
    3    2010-04-01 00:03:00.300  2010      4  
    4    2010-04-01 00:04:00.600  2010      4  
    5    2010-04-01 00:05:00.100  2010      4  
    6    2010-04-01 00:06:00.150  2010      4  
    7    2010-04-01 00:07:00.210  2010      4  
    8    2010-04-01 00:08:00.280  2010      4  
    9    2010-04-01 00:09:00.360  2010      4  
    10   2010-04-02 00:10:00.450  2010      4  
    11   2010-04-02 00:11:00.450  2010      4  
    12   2010-04-02 00:12:00.460  2010      4  
    13   2010-04-02 00:13:00.480  2010      4  
    14   2010-04-02 00:14:00.510  2010      4  
    15   2010-04-02 00:15:00.550  2010      4  
    16   2010-04-02 00:16:00.600  2010      4  
    17   2010-04-02 00:17:00.660  2010      4  
    18   2010-04-02 00:18:00.730  2010      4  
    19   2010-04-02 00:19:00.810  2010      4  
    20   2010-04-03 00:20:00.900  2010      4  
    21   2010-04-03 00:21:00.900  2010      4  
    22   2010-04-03 00:22:00.910  2010      4  
    23   2010-04-03 00:23:00.930  2010      4  
    24   2010-04-03 00:24:00.960  2010      4  
    25   2010-04-03 00:25:01.000  2010      4  
    26   2010-04-03 00:26:01.500  2010      4  
    27   2010-04-03 00:27:01.110  2010      4  
    28   2010-04-03 00:28:01.180  2010      4  
    29   2010-04-03 00:29:01.260  2010      4  
    ...                      ...   ...    ...  
    7270 2009-12-29 04:40:12.600  2009     12  
    7271 2009-12-29 04:41:12.600  2009     12  
    7272 2009-12-29 04:42:12.610  2009     12  
    7273 2009-12-29 04:43:12.630  2009     12  
    7274 2009-12-29 04:44:12.660  2009     12  
    7275 2009-12-29 04:45:12.700  2009     12  
    7276 2009-12-29 04:46:12.750  2009     12  
    7277 2009-12-29 04:47:12.810  2009     12  
    7278 2009-12-29 04:48:12.880  2009     12  
    7279 2009-12-29 04:49:12.960  2009     12  
    7280 2009-12-30 04:50:13.500  2009     12  
    7281 2009-12-30 04:51:13.500  2009     12  
    7282 2009-12-30 04:52:13.600  2009     12  
    7283 2009-12-30 04:53:13.800  2009     12  
    7284 2009-12-30 04:54:13.110  2009     12  
    7285 2009-12-30 04:55:13.150  2009     12  
    7286 2009-12-30 04:56:13.200  2009     12  
    7287 2009-12-30 04:57:13.260  2009     12  
    7288 2009-12-30 04:58:13.330  2009     12  
    7289 2009-12-30 04:59:13.410  2009     12  
    7290 2009-12-31 05:00:13.500  2009     12  
    7291 2009-12-31 05:01:13.500  2009     12  
    7292 2009-12-31 05:02:13.510  2009     12  
    7293 2009-12-31 05:03:13.530  2009     12  
    7294 2009-12-31 05:04:13.560  2009     12  
    7295 2009-12-31 05:05:13.600  2009     12  
    7296 2009-12-31 05:06:13.650  2009     12  
    7297 2009-12-31 05:07:13.710  2009     12  
    7298 2009-12-31 05:08:13.780  2009     12  
    7299 2009-12-31 05:09:13.860  2009     12  
    
    [7300 rows x 13 columns]



You can select a row range with slicing syntax:

.. code:: python

    table.double_col.sum()




.. parsed-literal::

    331785.0



Don't worry about the syntax here, but expressions resulting in tabular
output will come back as a pandas DataFrame by default:

.. code:: python

    metrics = [table.double_col.sum().name('total')]
    expr = table.group_by('string_col').aggregate(metrics)
    expr




.. parsed-literal::

      string_col  total
    0          6  44238
    1          4  29492
    2          7  51611
    3          1   7373
    4          9  66357
    5          8  58984
    6          3  22119
    7          2  14746
    8          5  36865
    9          0      0



Verbose mode and logging
========================

You may want to see or log all the Impala queries that Ibis executes
under the hood. To do that, use the ``options.verbose`` option:

.. code:: python

    ibis.options.verbose = True
    
    metrics = [table.double_col.sum().name('total')]
    expr = table.group_by('string_col').aggregate(metrics)
    expr


.. parsed-literal::

    SELECT `string_col`, sum(`double_col`) AS `total`
    FROM ibis_testing.`functional_alltypes`
    GROUP BY 1
    LIMIT 10000




.. parsed-literal::

      string_col  total
    0          6  44238
    1          4  29492
    2          1   7373
    3          7  51611
    4          8  58984
    5          9  66357
    6          2  14746
    7          3  22119
    8          5  36865
    9          0      0



.. code:: python

    queries = []
    def logger(x):
        queries.append(x)
        
    ibis.options.verbose_log = logger
    
    expr.execute()
    expr.execute()
    
    queries




.. parsed-literal::

    ['SELECT `string_col`, sum(`double_col`) AS `total`\nFROM ibis_testing.`functional_alltypes`\nGROUP BY 1\nLIMIT 10000',
     'SELECT `string_col`, sum(`double_col`) AS `total`\nFROM ibis_testing.`functional_alltypes`\nGROUP BY 1\nLIMIT 10000']



.. code:: python

    from __future__ import print_function
    ibis.options.verbose_log = lambda x: print(x)
    ibis.options.verbose = False

Aggregation basics
==================

One of the essential table API functions is ``aggregate``. Aggregation
involves the following

-  One or more *named* aggregate expressions, or *reductions*
-  Zero or more grouping expressions or column names

This ends up working very similarly to pandas's **groupby** mechanism.

Let's start with a simple reduction:

.. code:: python

    metric = table.double_col.sum()

As you saw above, you can execute this immediately and obtain a value:

.. code:: python

    metric




.. parsed-literal::

    331785.0



The reduced column can be more complex; for example, you could count the
number of null values in a column like so:

.. code:: python

    table.double_col.isnull().sum()




.. parsed-literal::

    0



To aggregate a table, potentially with grouping keys, we have to give
the reduction a name and call ``aggregate``

.. code:: python

    metric = metric.name('double_total')
    expr = table.aggregate([metric])
    result = con.execute(expr)
    result




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>double_total</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>331785</td>
        </tr>
      </tbody>
    </table>
    </div>



The result here is actually a pandas DataFrame with 1 row and just the
one column. We can add another metric and add a grouping key

.. code:: python

    metric2 = (table.bigint_col + 1).log10().max().name('some_metric')
    
    expr = table.aggregate([metric, metric2], by=['string_col'])
    expr




.. parsed-literal::

      string_col  double_total  some_metric
    0          6         44238     1.785330
    1          1          7373     1.041393
    2          4         29492     1.612784
    3          8         58984     1.908485
    4          7         51611     1.851258
    5          2         14746     1.322219
    6          9         66357     1.959041
    7          3         22119     1.491362
    8          5         36865     1.707570
    9          0             0     0.000000



We provide a convenience ``group_by``, a la pandas, to make this a
little more composable:

.. code:: python

    expr = (table.group_by('string_col')
            .aggregate([metric, metric2]))
    expr




.. parsed-literal::

      string_col  double_total  some_metric
    0          6         44238     1.785330
    1          1          7373     1.041393
    2          4         29492     1.612784
    3          7         51611     1.851258
    4          8         58984     1.908485
    5          2         14746     1.322219
    6          5         36865     1.707570
    7          9         66357     1.959041
    8          0             0     0.000000
    9          3         22119     1.491362



You can also group by named column expressions

.. code:: python

    keys = [table.timestamp_col.hour().name('hour'), 'string_col']
    
    expr = table.group_by(keys).aggregate([metric])
    
    # Top 10 by double_total, more on this later
    expr.sort_by([('double_total', False)]).limit(10)




.. parsed-literal::

        hour string_col  double_total
    0      1          9       13544.1
    1      2          9       13180.5
    2      0          9       13089.6
    3      3          9       13089.6
    4      4          9       12271.5
    5      1          8       12039.2
    6      2          8       11716.0
    7      0          8       11635.2
    8      3          8       11635.2
    9      4          8       10908.0
    10     1          7       10534.3
    11     2          7       10251.5
    12     3          7       10180.8
    13     0          7       10180.8
    14     4          7        9544.5
    15     1          6        9029.4
    16     2          6        8787.0
    17     0          6        8726.4
    18     3          6        8726.4
    19     4          6        8181.0
    20     1          5        7524.5
    21     2          5        7322.5
    22     3          5        7272.0
    23     0          5        7272.0
    24     4          5        6817.5
    25     1          4        6019.6
    26     2          4        5858.0
    27     0          4        5817.6
    28     3          4        5817.6
    29     4          4        5454.0
    30     1          3        4514.7
    31     2          3        4393.5
    32     0          3        4363.2
    33     3          3        4363.2
    34     4          3        4090.5
    35     1          2        3009.8
    36     2          2        2929.0
    37     3          2        2908.8
    38     0          2        2908.8
    39     4          2        2727.0
    40     1          1        1504.9
    41     2          1        1464.5
    42     0          1        1454.4
    43     3          1        1454.4
    44     4          1        1363.5
    45     5          9        1181.7
    46     5          8        1050.4
    47     5          7         919.1
    48     5          6         787.8
    49     5          5         656.5
    50     5          4         525.2
    51     5          3         393.9
    52     5          2         262.6
    53     5          1         131.3
    54     5          0           0.0
    55     2          0           0.0
    56     3          0           0.0
    57     4          0           0.0
    58     1          0           0.0
    59     0          0           0.0



In most cases, an aggregation by itself can be evaluated:

.. code:: python

    table.double_col.mean()




.. parsed-literal::

    45.450000000000003



This can also be done in simple cases along with ``group_by``:

.. code:: python

    table.group_by('string_col').double_col.mean()




.. parsed-literal::

      string_col  mean(double_col)
    0          6              60.6
    1          4              40.4
    2          7              70.7
    3          1              10.1
    4          8              80.8
    5          2              20.2
    6          5              50.5
    7          0               0.0
    8          9              90.9
    9          3              30.3



Many reduction functions have a default expression name, unlike many
other Ibis expressions (for now!), to make some common analyses easier:

.. code:: python

    d = table.double_col
    
    (table.group_by('string_col')
     .aggregate([d.sum(), d.mean(), d.min(), d.max()]))




.. parsed-literal::

      string_col    sum  mean   min   max
    0          6  44238  60.6  60.6  60.6
    1          4  29492  40.4  40.4  40.4
    2          1   7373  10.1  10.1  10.1
    3          7  51611  70.7  70.7  70.7
    4          8  58984  80.8  80.8  80.8
    5          2  14746  20.2  20.2  20.2
    6          9  66357  90.9  90.9  90.9
    7          3  22119  30.3  30.3  30.3
    8          5  36865  50.5  50.5  50.5
    9          0      0   0.0   0.0   0.0



Of course, for this *particular* case you can always use ``summary``

.. code:: python

    table.group_by('string_col').double_col.summary()




.. parsed-literal::

      string_col  count  nulls   min   max    sum  mean  approx_nunique
    0          6    730      0  60.6  60.6  44238  60.6               1
    1          4    730      0  40.4  40.4  29492  40.4               1
    2          7    730      0  70.7  70.7  51611  70.7               1
    3          1    730      0  10.1  10.1   7373  10.1               1
    4          8    730      0  80.8  80.8  58984  80.8               1
    5          2    730      0  20.2  20.2  14746  20.2               1
    6          5    730      0  50.5  50.5  36865  50.5               1
    7          0    730      0   0.0   0.0      0   0.0               1
    8          9    730      0  90.9  90.9  66357  90.9               1
    9          3    730      0  30.3  30.3  22119  30.3               1



Filtering
=========

Filtering tables works similarly to pandas

.. code:: python

    table.aggregate([table.bigint_col.max().name('bigint_max'),
                     table.bigint_col.min().name('bigint_min'),
                     table.int_col.max().name('int_max'),
                     table.int_col.min().name('int_min')])




.. parsed-literal::

       bigint_max  bigint_min  int_max  int_min
    0          90           0        9        0



.. code:: python

    table.count()




.. parsed-literal::

    7300



.. code:: python

    table[table.bigint_col > 50].count()




.. parsed-literal::

    2920



Filters can be composed using & (and), \| (or), and other logical array
operators

.. code:: python

    cond1 = table.bigint_col > 50
    cond2 = table.int_col.between(2, 7)
    table[cond1 | cond2].count()




.. parsed-literal::

    5840



There's a ``filter`` function that allows you to pass a list of
conditions (that are all required to hold):

.. code:: python

    table.filter([cond1, cond2]).count()




.. parsed-literal::

    1460



Note this is the same as &-ing the boolean conditions yourself:

.. code:: python

    table[cond1 & cond2].count()




.. parsed-literal::

    1460



Limits
======

Like in SQL, the ``limit`` function selects the indicated numbers of
rows from the beginning of a table's result set

.. code:: python

    table.limit(2)




.. parsed-literal::

            id bool_col  tinyint_col  smallint_col  int_col  bigint_col  \
    0     6690     True            0             0        0           0   
    1     6691    False            1             1        1          10   
    2     6692     True            2             2        2          20   
    3     6693    False            3             3        3          30   
    4     6694     True            4             4        4          40   
    5     6695    False            5             5        5          50   
    6     6696     True            6             6        6          60   
    7     6697    False            7             7        7          70   
    8     6698     True            8             8        8          80   
    9     6699    False            9             9        9          90   
    10    6700     True            0             0        0           0   
    11    6701    False            1             1        1          10   
    12    6702     True            2             2        2          20   
    13    6703    False            3             3        3          30   
    14    6704     True            4             4        4          40   
    15    6705    False            5             5        5          50   
    16    6706     True            6             6        6          60   
    17    6707    False            7             7        7          70   
    18    6708     True            8             8        8          80   
    19    6709    False            9             9        9          90   
    20    6710     True            0             0        0           0   
    21    6711    False            1             1        1          10   
    22    6712     True            2             2        2          20   
    23    6713    False            3             3        3          30   
    24    6714     True            4             4        4          40   
    25    6715    False            5             5        5          50   
    26    6716     True            6             6        6          60   
    27    6717    False            7             7        7          70   
    28    6718     True            8             8        8          80   
    29    6719    False            9             9        9          90   
    ...    ...      ...          ...           ...      ...         ...   
    7270  3930     True            0             0        0           0   
    7271  3931    False            1             1        1          10   
    7272  3932     True            2             2        2          20   
    7273  3933    False            3             3        3          30   
    7274  3934     True            4             4        4          40   
    7275  3935    False            5             5        5          50   
    7276  3936     True            6             6        6          60   
    7277  3937    False            7             7        7          70   
    7278  3938     True            8             8        8          80   
    7279  3939    False            9             9        9          90   
    7280  3940     True            0             0        0           0   
    7281  3941    False            1             1        1          10   
    7282  3942     True            2             2        2          20   
    7283  3943    False            3             3        3          30   
    7284  3944     True            4             4        4          40   
    7285  3945    False            5             5        5          50   
    7286  3946     True            6             6        6          60   
    7287  3947    False            7             7        7          70   
    7288  3948     True            8             8        8          80   
    7289  3949    False            9             9        9          90   
    7290  3950     True            0             0        0           0   
    7291  3951    False            1             1        1          10   
    7292  3952     True            2             2        2          20   
    7293  3953    False            3             3        3          30   
    7294  3954     True            4             4        4          40   
    7295  3955    False            5             5        5          50   
    7296  3956     True            6             6        6          60   
    7297  3957    False            7             7        7          70   
    7298  3958     True            8             8        8          80   
    7299  3959    False            9             9        9          90   
    
          float_col  double_col date_string_col string_col  \
    0           0.0         0.0        11/01/10          0   
    1           1.1        10.1        11/01/10          1   
    2           2.2        20.2        11/01/10          2   
    3           3.3        30.3        11/01/10          3   
    4           4.4        40.4        11/01/10          4   
    5           5.5        50.5        11/01/10          5   
    6           6.6        60.6        11/01/10          6   
    7           7.7        70.7        11/01/10          7   
    8           8.8        80.8        11/01/10          8   
    9           9.9        90.9        11/01/10          9   
    10          0.0         0.0        11/02/10          0   
    11          1.1        10.1        11/02/10          1   
    12          2.2        20.2        11/02/10          2   
    13          3.3        30.3        11/02/10          3   
    14          4.4        40.4        11/02/10          4   
    15          5.5        50.5        11/02/10          5   
    16          6.6        60.6        11/02/10          6   
    17          7.7        70.7        11/02/10          7   
    18          8.8        80.8        11/02/10          8   
    19          9.9        90.9        11/02/10          9   
    20          0.0         0.0        11/03/10          0   
    21          1.1        10.1        11/03/10          1   
    22          2.2        20.2        11/03/10          2   
    23          3.3        30.3        11/03/10          3   
    24          4.4        40.4        11/03/10          4   
    25          5.5        50.5        11/03/10          5   
    26          6.6        60.6        11/03/10          6   
    27          7.7        70.7        11/03/10          7   
    28          8.8        80.8        11/03/10          8   
    29          9.9        90.9        11/03/10          9   
    ...         ...         ...             ...        ...   
    7270        0.0         0.0        01/29/10          0   
    7271        1.1        10.1        01/29/10          1   
    7272        2.2        20.2        01/29/10          2   
    7273        3.3        30.3        01/29/10          3   
    7274        4.4        40.4        01/29/10          4   
    7275        5.5        50.5        01/29/10          5   
    7276        6.6        60.6        01/29/10          6   
    7277        7.7        70.7        01/29/10          7   
    7278        8.8        80.8        01/29/10          8   
    7279        9.9        90.9        01/29/10          9   
    7280        0.0         0.0        01/30/10          0   
    7281        1.1        10.1        01/30/10          1   
    7282        2.2        20.2        01/30/10          2   
    7283        3.3        30.3        01/30/10          3   
    7284        4.4        40.4        01/30/10          4   
    7285        5.5        50.5        01/30/10          5   
    7286        6.6        60.6        01/30/10          6   
    7287        7.7        70.7        01/30/10          7   
    7288        8.8        80.8        01/30/10          8   
    7289        9.9        90.9        01/30/10          9   
    7290        0.0         0.0        01/31/10          0   
    7291        1.1        10.1        01/31/10          1   
    7292        2.2        20.2        01/31/10          2   
    7293        3.3        30.3        01/31/10          3   
    7294        4.4        40.4        01/31/10          4   
    7295        5.5        50.5        01/31/10          5   
    7296        6.6        60.6        01/31/10          6   
    7297        7.7        70.7        01/31/10          7   
    7298        8.8        80.8        01/31/10          8   
    7299        9.9        90.9        01/31/10          9   
    
                   timestamp_col  year  month  
    0    2010-11-01 00:00:00.000  2010     11  
    1    2010-11-01 00:01:00.000  2010     11  
    2    2010-11-01 00:02:00.100  2010     11  
    3    2010-11-01 00:03:00.300  2010     11  
    4    2010-11-01 00:04:00.600  2010     11  
    5    2010-11-01 00:05:00.100  2010     11  
    6    2010-11-01 00:06:00.150  2010     11  
    7    2010-11-01 00:07:00.210  2010     11  
    8    2010-11-01 00:08:00.280  2010     11  
    9    2010-11-01 00:09:00.360  2010     11  
    10   2010-11-02 00:10:00.450  2010     11  
    11   2010-11-02 00:11:00.450  2010     11  
    12   2010-11-02 00:12:00.460  2010     11  
    13   2010-11-02 00:13:00.480  2010     11  
    14   2010-11-02 00:14:00.510  2010     11  
    15   2010-11-02 00:15:00.550  2010     11  
    16   2010-11-02 00:16:00.600  2010     11  
    17   2010-11-02 00:17:00.660  2010     11  
    18   2010-11-02 00:18:00.730  2010     11  
    19   2010-11-02 00:19:00.810  2010     11  
    20   2010-11-03 00:20:00.900  2010     11  
    21   2010-11-03 00:21:00.900  2010     11  
    22   2010-11-03 00:22:00.910  2010     11  
    23   2010-11-03 00:23:00.930  2010     11  
    24   2010-11-03 00:24:00.960  2010     11  
    25   2010-11-03 00:25:01.000  2010     11  
    26   2010-11-03 00:26:01.500  2010     11  
    27   2010-11-03 00:27:01.110  2010     11  
    28   2010-11-03 00:28:01.180  2010     11  
    29   2010-11-03 00:29:01.260  2010     11  
    ...                      ...   ...    ...  
    7270 2010-01-29 04:40:12.600  2010      1  
    7271 2010-01-29 04:41:12.600  2010      1  
    7272 2010-01-29 04:42:12.610  2010      1  
    7273 2010-01-29 04:43:12.630  2010      1  
    7274 2010-01-29 04:44:12.660  2010      1  
    7275 2010-01-29 04:45:12.700  2010      1  
    7276 2010-01-29 04:46:12.750  2010      1  
    7277 2010-01-29 04:47:12.810  2010      1  
    7278 2010-01-29 04:48:12.880  2010      1  
    7279 2010-01-29 04:49:12.960  2010      1  
    7280 2010-01-30 04:50:13.500  2010      1  
    7281 2010-01-30 04:51:13.500  2010      1  
    7282 2010-01-30 04:52:13.600  2010      1  
    7283 2010-01-30 04:53:13.800  2010      1  
    7284 2010-01-30 04:54:13.110  2010      1  
    7285 2010-01-30 04:55:13.150  2010      1  
    7286 2010-01-30 04:56:13.200  2010      1  
    7287 2010-01-30 04:57:13.260  2010      1  
    7288 2010-01-30 04:58:13.330  2010      1  
    7289 2010-01-30 04:59:13.410  2010      1  
    7290 2010-01-31 05:00:13.500  2010      1  
    7291 2010-01-31 05:01:13.500  2010      1  
    7292 2010-01-31 05:02:13.510  2010      1  
    7293 2010-01-31 05:03:13.530  2010      1  
    7294 2010-01-31 05:04:13.560  2010      1  
    7295 2010-01-31 05:05:13.600  2010      1  
    7296 2010-01-31 05:06:13.650  2010      1  
    7297 2010-01-31 05:07:13.710  2010      1  
    7298 2010-01-31 05:08:13.780  2010      1  
    7299 2010-01-31 05:09:13.860  2010      1  
    
    [7300 rows x 13 columns]


