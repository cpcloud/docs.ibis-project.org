
Now that you have ibis installed and connecting to your Impala, let's
get our feet wet.

**If you haven't loaded the test data yet used here, have a look at the
first notebook!**

.. code:: python

    import ibis
    
    ic = ibis.impala_connect(host='quickstart.cloudera', database='ibis_testing')
    hdfs = ibis.hdfs_connect(host='quickstart.cloudera', port=50070)
    con = ibis.make_client(ic, hdfs_client=hdfs)


::


    ---------------------------------------------------------------------------

    TTransportException                       Traceback (most recent call last)

    <ipython-input-1-57ccf9c09871> in <module>()
          1 import ibis
          2 
    ----> 3 ic = ibis.impala_connect(host='quickstart.cloudera', database='ibis_testing')
          4 hdfs = ibis.hdfs_connect(host='quickstart.cloudera', port=50070)
          5 con = ibis.make_client(ic, hdfs_client=hdfs)


    /home/wesm/code/cloudera/ibis/ibis/__init__.pyc in impala_connect(host, port, protocol, database, timeout, use_ssl, ca_cert, use_ldap, ldap_user, ldap_password, use_kerberos, kerberos_service_name, pool_size)
         97     }
         98 
    ---> 99     return ImpalaConnection(pool_size=pool_size, **params)
        100 
        101 


    /home/wesm/code/cloudera/ibis/ibis/client.pyc in __init__(self, pool_size, database, **params)
        171         self.max_pool_size = pool_size
        172 
    --> 173         self.ping()
        174 
        175     def set_database(self, name):


    /home/wesm/code/cloudera/ibis/ibis/client.pyc in ping(self)
        242 
        243     def ping(self):
    --> 244         self._new_cursor()
        245 
        246 


    /home/wesm/code/cloudera/ibis/ibis/client.pyc in _new_cursor(self)
        228     def _new_cursor(self):
        229         params = self.params.copy()
    --> 230         con = impyla_dbapi.connect(database=self.database, **params)
        231 
        232         # make sure the connection works


    /home/wesm/code/cloudera/impyla/impala/dbapi/__init__.pyc in connect(host, port, protocol, database, timeout, use_ssl, ca_cert, use_ldap, ldap_user, ldap_password, use_kerberos, kerberos_service_name)
         45         service = connect_to_hiveserver2(
         46             host, port, timeout, use_ssl, ca_cert, use_ldap, ldap_user,
    ---> 47             ldap_password, use_kerberos, kerberos_service_name)
         48         return HiveServer2Connection(service, default_db=database)
         49     else:


    /home/wesm/code/cloudera/impyla/impala/_rpc/hiveserver2.pyc in connect_to_impala(host, port, timeout, use_ssl, ca_cert, use_ldap, ldap_user, ldap_password, use_kerberos, kerberos_service_name)
        192     transport = _get_transport(sock, host, use_ldap, ldap_user, ldap_password,
        193                                use_kerberos, kerberos_service_name)
    --> 194     transport.open()
        195     protocol = TBinaryProtocol(transport)
        196     service = ImpalaHiveServer2Service.Client(protocol)


    /home/wesm/anaconda/lib/python2.7/site-packages/thrift/transport/TTransport.pyc in open(self)
        147 
        148   def open(self):
    --> 149     return self.__trans.open()
        150 
        151   def close(self):


    /home/wesm/anaconda/lib/python2.7/site-packages/thrift/transport/TSocket.pyc in open(self)
         97         message = 'Could not connect to %s:%d' % (self.host, self.port)
         98       raise TTransportException(type=TTransportException.NOT_OPEN,
    ---> 99                                 message=message)
        100 
        101   def read(self, sz):


    TTransportException: Could not connect to quickstart.cloudera:21050


Accessing an Impala table
=========================

The optional ``database`` paramter allows to fully qualify the table.

.. code:: python

    table = con.table('functional_alltypes')
    table = con.table('functional_alltypes', database='ibis_testing')


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-2-3b18e46dcf08> in <module>()
    ----> 1 table = con.table('functional_alltypes')
          2 table = con.table('functional_alltypes', database='ibis_testing')


    NameError: name 'con' is not defined


Column selection and basic expressions
======================================

Selecting columns from a table works just like pandas

.. code:: python

    col = table.double_col
    
    # alternately
    col2 = table['bigint_col']


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-3-d61b4d72fb3f> in <module>()
    ----> 1 col = table.double_col
          2 
          3 # alternately
          4 col2 = table['bigint_col']


    NameError: name 'table' is not defined


Table columns are equipped with a variety of math operations and other
methods to assist in writing your analytics. For example:

.. code:: python

    expr = col.log2() - 1


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-4-a1e13cc57220> in <module>()
    ----> 1 expr = col.log2() - 1
    

    NameError: name 'col' is not defined


Some operations transform arrays to arrays, while others aggregate, like
``sum`` and ``mean``:

.. code:: python

    expr2 = expr.sum()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-5-3f14971214f1> in <module>()
    ----> 1 expr2 = expr.sum()
    

    NameError: name 'expr' is not defined


The methods that are available on columns depend on the time of the
column. For example, you won't see the ``substr`` or ``upper`` methods
for strings on numeric columns:

.. code:: python

    substr_expr = table.string_col.upper().substr(0, 2)


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-6-4ba979347f8c> in <module>()
    ----> 1 substr_expr = table.string_col.upper().substr(0, 2)
    

    NameError: name 'table' is not defined


Notice that printing the expressions to the console does not actually do
anything, and shows a graphical representation of the expression you've
built.

**Note: don't worry too much about the details of the expression tree
that's outputted, it's very likely to change over time**

.. code:: python

    expr2


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-7-ad82b92f2ae2> in <module>()
    ----> 1 expr2
    

    NameError: name 'expr2' is not defined


We can also execute an expression by calling ``execute`` on the Impala
connection object

.. code:: python

    con.execute(col.sum())


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-8-f78c60b7417c> in <module>()
    ----> 1 con.execute(col.sum())
    

    NameError: name 'con' is not defined


There's a shortcut to make this a little more convenient in interactive
use

Interactive mode
================

Many Ibis expressions can be immediately executed against the database,
and it may improve your productivity to have the executed for you
whenever you try to print the expression in the console / IPython
notebook.

To do this, we have an *interactive* mode available, which can be turned
on/off like so:

.. code:: python

    ibis.options.interactive = True

Now, any expressions you write will be executed right away

.. code:: python

    table.limit(10)


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-10-1c422a5a8f29> in <module>()
    ----> 1 table.limit(10)
    

    NameError: name 'table' is not defined


You can select a row range with slicing syntax:

.. code:: python

    table.double_col.sum()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-11-e5a69c79f5a8> in <module>()
    ----> 1 table.double_col.sum()
    

    NameError: name 'table' is not defined


Don't worry about the syntax here, but expressions resulting in tabular
output will come back as a pandas DataFrame by default:

.. code:: python

    metrics = [table.double_col.sum().name('total')]
    expr = table.group_by('string_col').aggregate(metrics)
    expr


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-12-5006c96aaeaa> in <module>()
    ----> 1 metrics = [table.double_col.sum().name('total')]
          2 expr = table.group_by('string_col').aggregate(metrics)
          3 expr


    NameError: name 'table' is not defined


Verbose mode and logging
========================

You may want to see or log all the Impala queries that Ibis executes
under the hood. To do that, use the ``options.verbose`` option:

.. code:: python

    ibis.options.verbose = True
    
    metrics = [table.double_col.sum().name('total')]
    expr = table.group_by('string_col').aggregate(metrics)
    expr


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-13-c845ee125fbf> in <module>()
          1 ibis.options.verbose = True
          2 
    ----> 3 metrics = [table.double_col.sum().name('total')]
          4 expr = table.group_by('string_col').aggregate(metrics)
          5 expr


    NameError: name 'table' is not defined


.. code:: python

    queries = []
    def logger(x):
        queries.append(x)
        
    ibis.options.verbose_log = logger
    
    expr.execute()
    expr.execute()
    
    queries


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-14-c952d069b6ef> in <module>()
          5 ibis.options.verbose_log = logger
          6 
    ----> 7 expr.execute()
          8 expr.execute()
          9 


    NameError: name 'expr' is not defined


.. code:: python

    from __future__ import print_function
    ibis.options.verbose_log = lambda x: print(x)
    ibis.options.verbose = False

Aggregation basics
==================

One of the essential table API functions is ``aggregate``. Aggregation
involves the following

-  One or more *named* aggregate expressions, or *reductions*
-  Zero or more grouping expressions or column names

This ends up working very similarly to pandas's **groupby** mechanism.

Let's start with a simple reduction:

.. code:: python

    metric = table.double_col.sum()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-16-cd6e621c22ea> in <module>()
    ----> 1 metric = table.double_col.sum()
    

    NameError: name 'table' is not defined


As you saw above, you can execute this immediately and obtain a value:

.. code:: python

    metric


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-17-eeb1e9249a73> in <module>()
    ----> 1 metric
    

    NameError: name 'metric' is not defined


The reduced column can be more complex; for example, you could count the
number of null values in a column like so:

.. code:: python

    table.double_col.isnull().sum()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-18-30b780b7aff2> in <module>()
    ----> 1 table.double_col.isnull().sum()
    

    NameError: name 'table' is not defined


To aggregate a table, potentially with grouping keys, we have to give
the reduction a name and call ``aggregate``

.. code:: python

    metric = metric.name('double_total')
    expr = table.aggregate([metric])
    result = con.execute(expr)
    result


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-19-78702ec65b73> in <module>()
    ----> 1 metric = metric.name('double_total')
          2 expr = table.aggregate([metric])
          3 result = con.execute(expr)
          4 result


    NameError: name 'metric' is not defined


The result here is actually a pandas DataFrame with 1 row and just the
one column. We can add another metric and add a grouping key

.. code:: python

    metric2 = (table.bigint_col + 1).log10().max().name('some_metric')
    
    expr = table.aggregate([metric, metric2], by=['string_col'])
    expr


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-20-c0f96d8aee7e> in <module>()
    ----> 1 metric2 = (table.bigint_col + 1).log10().max().name('some_metric')
          2 
          3 expr = table.aggregate([metric, metric2], by=['string_col'])
          4 expr


    NameError: name 'table' is not defined


We provide a convenience ``group_by``, a la pandas, to make this a
little more composable:

.. code:: python

    expr = (table.group_by('string_col')
            .aggregate([metric, metric2]))
    expr


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-21-70c03d8f8d30> in <module>()
    ----> 1 expr = (table.group_by('string_col')
          2         .aggregate([metric, metric2]))
          3 expr


    NameError: name 'table' is not defined


You can also group by named column expressions

.. code:: python

    keys = [table.timestamp_col.hour().name('hour'), 'string_col']
    
    expr = table.group_by(keys).aggregate([metric])
    
    # Top 10 by double_total, more on this later
    expr.sort_by([('double_total', False)]).limit(10)


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-22-61b59ea931c8> in <module>()
    ----> 1 keys = [table.timestamp_col.hour().name('hour'), 'string_col']
          2 
          3 expr = table.group_by(keys).aggregate([metric])
          4 
          5 # Top 10 by double_total, more on this later


    NameError: name 'table' is not defined


In most cases, an aggregation by itself can be evaluated:

.. code:: python

    table.double_col.mean()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-23-493aeb2fb8d9> in <module>()
    ----> 1 table.double_col.mean()
    

    NameError: name 'table' is not defined


This can also be done in simple cases along with ``group_by``:

.. code:: python

    table.group_by('string_col').double_col.mean()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-24-620c2c5597ee> in <module>()
    ----> 1 table.group_by('string_col').double_col.mean()
    

    NameError: name 'table' is not defined


Many reduction functions have a default expression name, unlike many
other Ibis expressions (for now!), to make some common analyses easier:

.. code:: python

    d = table.double_col
    
    (table.group_by('string_col')
     .aggregate([d.sum(), d.mean(), d.min(), d.max()]))


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-25-e16c2c9dd040> in <module>()
    ----> 1 d = table.double_col
          2 
          3 (table.group_by('string_col')
          4  .aggregate([d.sum(), d.mean(), d.min(), d.max()]))


    NameError: name 'table' is not defined


Of course, for this *particular* case you can always use ``summary``

.. code:: python

    table.group_by('string_col').double_col.summary()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-26-877e505db6bb> in <module>()
    ----> 1 table.group_by('string_col').double_col.summary()
    

    NameError: name 'table' is not defined


Filtering
=========

Filtering tables works similarly to pandas

.. code:: python

    table.aggregate([table.bigint_col.max().name('bigint_max'),
                     table.bigint_col.min().name('bigint_min'),
                     table.int_col.max().name('int_max'),
                     table.int_col.min().name('int_min')])


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-27-4403a5de9d81> in <module>()
    ----> 1 table.aggregate([table.bigint_col.max().name('bigint_max'),
          2                  table.bigint_col.min().name('bigint_min'),
          3                  table.int_col.max().name('int_max'),
          4                  table.int_col.min().name('int_min')])


    NameError: name 'table' is not defined


.. code:: python

    table.count()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-28-67c26c7c612a> in <module>()
    ----> 1 table.count()
    

    NameError: name 'table' is not defined


.. code:: python

    table[table.bigint_col > 50].count()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-29-600f973fd084> in <module>()
    ----> 1 table[table.bigint_col > 50].count()
    

    NameError: name 'table' is not defined


Filters can be composed using & (and), \| (or), and other logical array
operators

.. code:: python

    cond1 = table.bigint_col > 50
    cond2 = table.int_col.between(2, 7)
    table[cond1 | cond2].count()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-30-12e28bdd9aa5> in <module>()
    ----> 1 cond1 = table.bigint_col > 50
          2 cond2 = table.int_col.between(2, 7)
          3 table[cond1 | cond2].count()


    NameError: name 'table' is not defined


There's a ``filter`` function that allows you to pass a list of
conditions (that are all required to hold):

.. code:: python

    table.filter([cond1, cond2]).count()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-31-a56356db32df> in <module>()
    ----> 1 table.filter([cond1, cond2]).count()
    

    NameError: name 'table' is not defined


Note this is the same as &-ing the boolean conditions yourself:

.. code:: python

    table[cond1 & cond2].count()


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-32-68a57d813345> in <module>()
    ----> 1 table[cond1 & cond2].count()
    

    NameError: name 'table' is not defined


Limits
======

Like in SQL, the ``limit`` function selects the indicated numbers of
rows from the beginning of a table's result set

.. code:: python

    table.limit(2)


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-33-493676559cc4> in <module>()
    ----> 1 table.limit(2)
    

    NameError: name 'table' is not defined

