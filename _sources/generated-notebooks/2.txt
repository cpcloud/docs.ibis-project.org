
.. code:: python

    import ibis
    import os
    hdfs_port = os.environ.get('IBIS_WEBHDFS_PORT', 50070)
    
    ic = ibis.impala_connect(host='quickstart.cloudera', database='ibis_testing')
    hdfs = ibis.hdfs_connect(host='quickstart.cloudera', port=hdfs_port)
    con = ibis.make_client(ic, hdfs_client=hdfs)
    
    ibis.options.interactive = True

Projections: adding/selecting columns
=====================================

Projections are the general way for adding new columns to tables, or
selecting or removing existing ones.

.. code:: python

    table = con.table('functional_alltypes')
    table.limit(5)




.. parsed-literal::

            id bool_col  tinyint_col  smallint_col  int_col  bigint_col  \
    0     4550     True            0             0        0           0   
    1     4551    False            1             1        1          10   
    2     4552     True            2             2        2          20   
    3     4553    False            3             3        3          30   
    4     4554     True            4             4        4          40   
    5     4555    False            5             5        5          50   
    6     4556     True            6             6        6          60   
    7     4557    False            7             7        7          70   
    8     4558     True            8             8        8          80   
    9     4559    False            9             9        9          90   
    10    4560     True            0             0        0           0   
    11    4561    False            1             1        1          10   
    12    4562     True            2             2        2          20   
    13    4563    False            3             3        3          30   
    14    4564     True            4             4        4          40   
    15    4565    False            5             5        5          50   
    16    4566     True            6             6        6          60   
    17    4567    False            7             7        7          70   
    18    4568     True            8             8        8          80   
    19    4569    False            9             9        9          90   
    20    4570     True            0             0        0           0   
    21    4571    False            1             1        1          10   
    22    4572     True            2             2        2          20   
    23    4573    False            3             3        3          30   
    24    4574     True            4             4        4          40   
    25    4575    False            5             5        5          50   
    26    4576     True            6             6        6          60   
    27    4577    False            7             7        7          70   
    28    4578     True            8             8        8          80   
    29    4579    False            9             9        9          90   
    ...    ...      ...          ...           ...      ...         ...   
    7270  3930     True            0             0        0           0   
    7271  3931    False            1             1        1          10   
    7272  3932     True            2             2        2          20   
    7273  3933    False            3             3        3          30   
    7274  3934     True            4             4        4          40   
    7275  3935    False            5             5        5          50   
    7276  3936     True            6             6        6          60   
    7277  3937    False            7             7        7          70   
    7278  3938     True            8             8        8          80   
    7279  3939    False            9             9        9          90   
    7280  3940     True            0             0        0           0   
    7281  3941    False            1             1        1          10   
    7282  3942     True            2             2        2          20   
    7283  3943    False            3             3        3          30   
    7284  3944     True            4             4        4          40   
    7285  3945    False            5             5        5          50   
    7286  3946     True            6             6        6          60   
    7287  3947    False            7             7        7          70   
    7288  3948     True            8             8        8          80   
    7289  3949    False            9             9        9          90   
    7290  3950     True            0             0        0           0   
    7291  3951    False            1             1        1          10   
    7292  3952     True            2             2        2          20   
    7293  3953    False            3             3        3          30   
    7294  3954     True            4             4        4          40   
    7295  3955    False            5             5        5          50   
    7296  3956     True            6             6        6          60   
    7297  3957    False            7             7        7          70   
    7298  3958     True            8             8        8          80   
    7299  3959    False            9             9        9          90   
    
          float_col  double_col date_string_col string_col  \
    0           0.0         0.0        04/01/10          0   
    1           1.1        10.1        04/01/10          1   
    2           2.2        20.2        04/01/10          2   
    3           3.3        30.3        04/01/10          3   
    4           4.4        40.4        04/01/10          4   
    5           5.5        50.5        04/01/10          5   
    6           6.6        60.6        04/01/10          6   
    7           7.7        70.7        04/01/10          7   
    8           8.8        80.8        04/01/10          8   
    9           9.9        90.9        04/01/10          9   
    10          0.0         0.0        04/02/10          0   
    11          1.1        10.1        04/02/10          1   
    12          2.2        20.2        04/02/10          2   
    13          3.3        30.3        04/02/10          3   
    14          4.4        40.4        04/02/10          4   
    15          5.5        50.5        04/02/10          5   
    16          6.6        60.6        04/02/10          6   
    17          7.7        70.7        04/02/10          7   
    18          8.8        80.8        04/02/10          8   
    19          9.9        90.9        04/02/10          9   
    20          0.0         0.0        04/03/10          0   
    21          1.1        10.1        04/03/10          1   
    22          2.2        20.2        04/03/10          2   
    23          3.3        30.3        04/03/10          3   
    24          4.4        40.4        04/03/10          4   
    25          5.5        50.5        04/03/10          5   
    26          6.6        60.6        04/03/10          6   
    27          7.7        70.7        04/03/10          7   
    28          8.8        80.8        04/03/10          8   
    29          9.9        90.9        04/03/10          9   
    ...         ...         ...             ...        ...   
    7270        0.0         0.0        01/29/10          0   
    7271        1.1        10.1        01/29/10          1   
    7272        2.2        20.2        01/29/10          2   
    7273        3.3        30.3        01/29/10          3   
    7274        4.4        40.4        01/29/10          4   
    7275        5.5        50.5        01/29/10          5   
    7276        6.6        60.6        01/29/10          6   
    7277        7.7        70.7        01/29/10          7   
    7278        8.8        80.8        01/29/10          8   
    7279        9.9        90.9        01/29/10          9   
    7280        0.0         0.0        01/30/10          0   
    7281        1.1        10.1        01/30/10          1   
    7282        2.2        20.2        01/30/10          2   
    7283        3.3        30.3        01/30/10          3   
    7284        4.4        40.4        01/30/10          4   
    7285        5.5        50.5        01/30/10          5   
    7286        6.6        60.6        01/30/10          6   
    7287        7.7        70.7        01/30/10          7   
    7288        8.8        80.8        01/30/10          8   
    7289        9.9        90.9        01/30/10          9   
    7290        0.0         0.0        01/31/10          0   
    7291        1.1        10.1        01/31/10          1   
    7292        2.2        20.2        01/31/10          2   
    7293        3.3        30.3        01/31/10          3   
    7294        4.4        40.4        01/31/10          4   
    7295        5.5        50.5        01/31/10          5   
    7296        6.6        60.6        01/31/10          6   
    7297        7.7        70.7        01/31/10          7   
    7298        8.8        80.8        01/31/10          8   
    7299        9.9        90.9        01/31/10          9   
    
                   timestamp_col  year  month  
    0    2010-04-01 00:00:00.000  2010      4  
    1    2010-04-01 00:01:00.000  2010      4  
    2    2010-04-01 00:02:00.100  2010      4  
    3    2010-04-01 00:03:00.300  2010      4  
    4    2010-04-01 00:04:00.600  2010      4  
    5    2010-04-01 00:05:00.100  2010      4  
    6    2010-04-01 00:06:00.150  2010      4  
    7    2010-04-01 00:07:00.210  2010      4  
    8    2010-04-01 00:08:00.280  2010      4  
    9    2010-04-01 00:09:00.360  2010      4  
    10   2010-04-02 00:10:00.450  2010      4  
    11   2010-04-02 00:11:00.450  2010      4  
    12   2010-04-02 00:12:00.460  2010      4  
    13   2010-04-02 00:13:00.480  2010      4  
    14   2010-04-02 00:14:00.510  2010      4  
    15   2010-04-02 00:15:00.550  2010      4  
    16   2010-04-02 00:16:00.600  2010      4  
    17   2010-04-02 00:17:00.660  2010      4  
    18   2010-04-02 00:18:00.730  2010      4  
    19   2010-04-02 00:19:00.810  2010      4  
    20   2010-04-03 00:20:00.900  2010      4  
    21   2010-04-03 00:21:00.900  2010      4  
    22   2010-04-03 00:22:00.910  2010      4  
    23   2010-04-03 00:23:00.930  2010      4  
    24   2010-04-03 00:24:00.960  2010      4  
    25   2010-04-03 00:25:01.000  2010      4  
    26   2010-04-03 00:26:01.500  2010      4  
    27   2010-04-03 00:27:01.110  2010      4  
    28   2010-04-03 00:28:01.180  2010      4  
    29   2010-04-03 00:29:01.260  2010      4  
    ...                      ...   ...    ...  
    7270 2010-01-29 04:40:12.600  2010      1  
    7271 2010-01-29 04:41:12.600  2010      1  
    7272 2010-01-29 04:42:12.610  2010      1  
    7273 2010-01-29 04:43:12.630  2010      1  
    7274 2010-01-29 04:44:12.660  2010      1  
    7275 2010-01-29 04:45:12.700  2010      1  
    7276 2010-01-29 04:46:12.750  2010      1  
    7277 2010-01-29 04:47:12.810  2010      1  
    7278 2010-01-29 04:48:12.880  2010      1  
    7279 2010-01-29 04:49:12.960  2010      1  
    7280 2010-01-30 04:50:13.500  2010      1  
    7281 2010-01-30 04:51:13.500  2010      1  
    7282 2010-01-30 04:52:13.600  2010      1  
    7283 2010-01-30 04:53:13.800  2010      1  
    7284 2010-01-30 04:54:13.110  2010      1  
    7285 2010-01-30 04:55:13.150  2010      1  
    7286 2010-01-30 04:56:13.200  2010      1  
    7287 2010-01-30 04:57:13.260  2010      1  
    7288 2010-01-30 04:58:13.330  2010      1  
    7289 2010-01-30 04:59:13.410  2010      1  
    7290 2010-01-31 05:00:13.500  2010      1  
    7291 2010-01-31 05:01:13.500  2010      1  
    7292 2010-01-31 05:02:13.510  2010      1  
    7293 2010-01-31 05:03:13.530  2010      1  
    7294 2010-01-31 05:04:13.560  2010      1  
    7295 2010-01-31 05:05:13.600  2010      1  
    7296 2010-01-31 05:06:13.650  2010      1  
    7297 2010-01-31 05:07:13.710  2010      1  
    7298 2010-01-31 05:08:13.780  2010      1  
    7299 2010-01-31 05:09:13.860  2010      1  
    
    [7300 rows x 13 columns]



First, the basics: selecting columns:

.. code:: python

    proj = table['bool_col', 'int_col', 'double_col']
    
    proj.limit(5)




.. parsed-literal::

         bool_col  int_col  double_col
    0        True        0         0.0
    1       False        1        10.1
    2        True        2        20.2
    3       False        3        30.3
    4        True        4        40.4
    5       False        5        50.5
    6        True        6        60.6
    7       False        7        70.7
    8        True        8        80.8
    9       False        9        90.9
    10       True        0         0.0
    11      False        1        10.1
    12       True        2        20.2
    13      False        3        30.3
    14       True        4        40.4
    15      False        5        50.5
    16       True        6        60.6
    17      False        7        70.7
    18       True        8        80.8
    19      False        9        90.9
    20       True        0         0.0
    21      False        1        10.1
    22       True        2        20.2
    23      False        3        30.3
    24       True        4        40.4
    25      False        5        50.5
    26       True        6        60.6
    27      False        7        70.7
    28       True        8        80.8
    29      False        9        90.9
    ...       ...      ...         ...
    7270     True        0         0.0
    7271    False        1        10.1
    7272     True        2        20.2
    7273    False        3        30.3
    7274     True        4        40.4
    7275    False        5        50.5
    7276     True        6        60.6
    7277    False        7        70.7
    7278     True        8        80.8
    7279    False        9        90.9
    7280     True        0         0.0
    7281    False        1        10.1
    7282     True        2        20.2
    7283    False        3        30.3
    7284     True        4        40.4
    7285    False        5        50.5
    7286     True        6        60.6
    7287    False        7        70.7
    7288     True        8        80.8
    7289    False        9        90.9
    7290     True        0         0.0
    7291    False        1        10.1
    7292     True        2        20.2
    7293    False        3        30.3
    7294     True        4        40.4
    7295    False        5        50.5
    7296     True        6        60.6
    7297    False        7        70.7
    7298     True        8        80.8
    7299    False        9        90.9
    
    [7300 rows x 3 columns]



You can make a list of columns you want, too, and pass that:

.. code:: python

    to_select = ['bool_col', 'int_col']
    table[to_select].limit(5)




.. parsed-literal::

         bool_col  int_col
    0        True        0
    1       False        1
    2        True        2
    3       False        3
    4        True        4
    5       False        5
    6        True        6
    7       False        7
    8        True        8
    9       False        9
    10       True        0
    11      False        1
    12       True        2
    13      False        3
    14       True        4
    15      False        5
    16       True        6
    17      False        7
    18       True        8
    19      False        9
    20       True        0
    21      False        1
    22       True        2
    23      False        3
    24       True        4
    25      False        5
    26       True        6
    27      False        7
    28       True        8
    29      False        9
    ...       ...      ...
    7270     True        0
    7271    False        1
    7272     True        2
    7273    False        3
    7274     True        4
    7275    False        5
    7276     True        6
    7277    False        7
    7278     True        8
    7279    False        9
    7280     True        0
    7281    False        1
    7282     True        2
    7283    False        3
    7284     True        4
    7285    False        5
    7286     True        6
    7287    False        7
    7288     True        8
    7289    False        9
    7290     True        0
    7291    False        1
    7292     True        2
    7293    False        3
    7294     True        4
    7295    False        5
    7296     True        6
    7297    False        7
    7298     True        8
    7299    False        9
    
    [7300 rows x 2 columns]



You can also use the explicit ``projection`` or ``select`` functions

.. code:: python

    table.select(['int_col', 'double_col']).limit(5)




.. parsed-literal::

          int_col  double_col
    0           0         0.0
    1           1        10.1
    2           2        20.2
    3           3        30.3
    4           4        40.4
    5           5        50.5
    6           6        60.6
    7           7        70.7
    8           8        80.8
    9           9        90.9
    10          0         0.0
    11          1        10.1
    12          2        20.2
    13          3        30.3
    14          4        40.4
    15          5        50.5
    16          6        60.6
    17          7        70.7
    18          8        80.8
    19          9        90.9
    20          0         0.0
    21          1        10.1
    22          2        20.2
    23          3        30.3
    24          4        40.4
    25          5        50.5
    26          6        60.6
    27          7        70.7
    28          8        80.8
    29          9        90.9
    ...       ...         ...
    7270        0         0.0
    7271        1        10.1
    7272        2        20.2
    7273        3        30.3
    7274        4        40.4
    7275        5        50.5
    7276        6        60.6
    7277        7        70.7
    7278        8        80.8
    7279        9        90.9
    7280        0         0.0
    7281        1        10.1
    7282        2        20.2
    7283        3        30.3
    7284        4        40.4
    7285        5        50.5
    7286        6        60.6
    7287        7        70.7
    7288        8        80.8
    7289        9        90.9
    7290        0         0.0
    7291        1        10.1
    7292        2        20.2
    7293        3        30.3
    7294        4        40.4
    7295        5        50.5
    7296        6        60.6
    7297        7        70.7
    7298        8        80.8
    7299        9        90.9
    
    [7300 rows x 2 columns]



We can add new columns by using named column expressions

.. code:: python

    bigger_expr = (table.int_col * 2).name('bigger_ints')
    proj2 = table['int_col', bigger_expr]
    proj2.limit(5)




.. parsed-literal::

          int_col  bigger_ints
    0           0            0
    1           1            2
    2           2            4
    3           3            6
    4           4            8
    5           5           10
    6           6           12
    7           7           14
    8           8           16
    9           9           18
    10          0            0
    11          1            2
    12          2            4
    13          3            6
    14          4            8
    15          5           10
    16          6           12
    17          7           14
    18          8           16
    19          9           18
    20          0            0
    21          1            2
    22          2            4
    23          3            6
    24          4            8
    25          5           10
    26          6           12
    27          7           14
    28          8           16
    29          9           18
    ...       ...          ...
    7270        0            0
    7271        1            2
    7272        2            4
    7273        3            6
    7274        4            8
    7275        5           10
    7276        6           12
    7277        7           14
    7278        8           16
    7279        9           18
    7280        0            0
    7281        1            2
    7282        2            4
    7283        3            6
    7284        4            8
    7285        5           10
    7286        6           12
    7287        7           14
    7288        8           16
    7289        9           18
    7290        0            0
    7291        1            2
    7292        2            4
    7293        3            6
    7294        4            8
    7295        5           10
    7296        6           12
    7297        7           14
    7298        8           16
    7299        9           18
    
    [7300 rows x 2 columns]



Adding columns is a shortcut for projection. In Ibis, adding columns
always produces a new table reference

.. code:: python

    table2 = table.add_column(bigger_expr)
    table2.limit(5)




.. parsed-literal::

            id bool_col  tinyint_col  smallint_col  int_col  bigint_col  \
    0     5460     True            0             0        0           0   
    1     5461    False            1             1        1          10   
    2     5462     True            2             2        2          20   
    3     5463    False            3             3        3          30   
    4     5464     True            4             4        4          40   
    5     5465    False            5             5        5          50   
    6     5466     True            6             6        6          60   
    7     5467    False            7             7        7          70   
    8     5468     True            8             8        8          80   
    9     5469    False            9             9        9          90   
    10    5470     True            0             0        0           0   
    11    5471    False            1             1        1          10   
    12    5472     True            2             2        2          20   
    13    5473    False            3             3        3          30   
    14    5474     True            4             4        4          40   
    15    5475    False            5             5        5          50   
    16    5476     True            6             6        6          60   
    17    5477    False            7             7        7          70   
    18    5478     True            8             8        8          80   
    19    5479    False            9             9        9          90   
    20    5480     True            0             0        0           0   
    21    5481    False            1             1        1          10   
    22    5482     True            2             2        2          20   
    23    5483    False            3             3        3          30   
    24    5484     True            4             4        4          40   
    25    5485    False            5             5        5          50   
    26    5486     True            6             6        6          60   
    27    5487    False            7             7        7          70   
    28    5488     True            8             8        8          80   
    29    5489    False            9             9        9          90   
    ...    ...      ...          ...           ...      ...         ...   
    7270  3620     True            0             0        0           0   
    7271  3621    False            1             1        1          10   
    7272  3622     True            2             2        2          20   
    7273  3623    False            3             3        3          30   
    7274  3624     True            4             4        4          40   
    7275  3625    False            5             5        5          50   
    7276  3626     True            6             6        6          60   
    7277  3627    False            7             7        7          70   
    7278  3628     True            8             8        8          80   
    7279  3629    False            9             9        9          90   
    7280  3630     True            0             0        0           0   
    7281  3631    False            1             1        1          10   
    7282  3632     True            2             2        2          20   
    7283  3633    False            3             3        3          30   
    7284  3634     True            4             4        4          40   
    7285  3635    False            5             5        5          50   
    7286  3636     True            6             6        6          60   
    7287  3637    False            7             7        7          70   
    7288  3638     True            8             8        8          80   
    7289  3639    False            9             9        9          90   
    7290  3640     True            0             0        0           0   
    7291  3641    False            1             1        1          10   
    7292  3642     True            2             2        2          20   
    7293  3643    False            3             3        3          30   
    7294  3644     True            4             4        4          40   
    7295  3645    False            5             5        5          50   
    7296  3646     True            6             6        6          60   
    7297  3647    False            7             7        7          70   
    7298  3648     True            8             8        8          80   
    7299  3649    False            9             9        9          90   
    
          float_col  double_col date_string_col string_col  \
    0           0.0         0.0        07/01/10          0   
    1           1.1        10.1        07/01/10          1   
    2           2.2        20.2        07/01/10          2   
    3           3.3        30.3        07/01/10          3   
    4           4.4        40.4        07/01/10          4   
    5           5.5        50.5        07/01/10          5   
    6           6.6        60.6        07/01/10          6   
    7           7.7        70.7        07/01/10          7   
    8           8.8        80.8        07/01/10          8   
    9           9.9        90.9        07/01/10          9   
    10          0.0         0.0        07/02/10          0   
    11          1.1        10.1        07/02/10          1   
    12          2.2        20.2        07/02/10          2   
    13          3.3        30.3        07/02/10          3   
    14          4.4        40.4        07/02/10          4   
    15          5.5        50.5        07/02/10          5   
    16          6.6        60.6        07/02/10          6   
    17          7.7        70.7        07/02/10          7   
    18          8.8        80.8        07/02/10          8   
    19          9.9        90.9        07/02/10          9   
    20          0.0         0.0        07/03/10          0   
    21          1.1        10.1        07/03/10          1   
    22          2.2        20.2        07/03/10          2   
    23          3.3        30.3        07/03/10          3   
    24          4.4        40.4        07/03/10          4   
    25          5.5        50.5        07/03/10          5   
    26          6.6        60.6        07/03/10          6   
    27          7.7        70.7        07/03/10          7   
    28          8.8        80.8        07/03/10          8   
    29          9.9        90.9        07/03/10          9   
    ...         ...         ...             ...        ...   
    7270        0.0         0.0        12/29/09          0   
    7271        1.1        10.1        12/29/09          1   
    7272        2.2        20.2        12/29/09          2   
    7273        3.3        30.3        12/29/09          3   
    7274        4.4        40.4        12/29/09          4   
    7275        5.5        50.5        12/29/09          5   
    7276        6.6        60.6        12/29/09          6   
    7277        7.7        70.7        12/29/09          7   
    7278        8.8        80.8        12/29/09          8   
    7279        9.9        90.9        12/29/09          9   
    7280        0.0         0.0        12/30/09          0   
    7281        1.1        10.1        12/30/09          1   
    7282        2.2        20.2        12/30/09          2   
    7283        3.3        30.3        12/30/09          3   
    7284        4.4        40.4        12/30/09          4   
    7285        5.5        50.5        12/30/09          5   
    7286        6.6        60.6        12/30/09          6   
    7287        7.7        70.7        12/30/09          7   
    7288        8.8        80.8        12/30/09          8   
    7289        9.9        90.9        12/30/09          9   
    7290        0.0         0.0        12/31/09          0   
    7291        1.1        10.1        12/31/09          1   
    7292        2.2        20.2        12/31/09          2   
    7293        3.3        30.3        12/31/09          3   
    7294        4.4        40.4        12/31/09          4   
    7295        5.5        50.5        12/31/09          5   
    7296        6.6        60.6        12/31/09          6   
    7297        7.7        70.7        12/31/09          7   
    7298        8.8        80.8        12/31/09          8   
    7299        9.9        90.9        12/31/09          9   
    
                   timestamp_col  year  month  bigger_ints  
    0    2010-07-01 00:00:00.000  2010      7            0  
    1    2010-07-01 00:01:00.000  2010      7            2  
    2    2010-07-01 00:02:00.100  2010      7            4  
    3    2010-07-01 00:03:00.300  2010      7            6  
    4    2010-07-01 00:04:00.600  2010      7            8  
    5    2010-07-01 00:05:00.100  2010      7           10  
    6    2010-07-01 00:06:00.150  2010      7           12  
    7    2010-07-01 00:07:00.210  2010      7           14  
    8    2010-07-01 00:08:00.280  2010      7           16  
    9    2010-07-01 00:09:00.360  2010      7           18  
    10   2010-07-02 00:10:00.450  2010      7            0  
    11   2010-07-02 00:11:00.450  2010      7            2  
    12   2010-07-02 00:12:00.460  2010      7            4  
    13   2010-07-02 00:13:00.480  2010      7            6  
    14   2010-07-02 00:14:00.510  2010      7            8  
    15   2010-07-02 00:15:00.550  2010      7           10  
    16   2010-07-02 00:16:00.600  2010      7           12  
    17   2010-07-02 00:17:00.660  2010      7           14  
    18   2010-07-02 00:18:00.730  2010      7           16  
    19   2010-07-02 00:19:00.810  2010      7           18  
    20   2010-07-03 00:20:00.900  2010      7            0  
    21   2010-07-03 00:21:00.900  2010      7            2  
    22   2010-07-03 00:22:00.910  2010      7            4  
    23   2010-07-03 00:23:00.930  2010      7            6  
    24   2010-07-03 00:24:00.960  2010      7            8  
    25   2010-07-03 00:25:01.000  2010      7           10  
    26   2010-07-03 00:26:01.500  2010      7           12  
    27   2010-07-03 00:27:01.110  2010      7           14  
    28   2010-07-03 00:28:01.180  2010      7           16  
    29   2010-07-03 00:29:01.260  2010      7           18  
    ...                      ...   ...    ...          ...  
    7270 2009-12-29 04:40:12.600  2009     12            0  
    7271 2009-12-29 04:41:12.600  2009     12            2  
    7272 2009-12-29 04:42:12.610  2009     12            4  
    7273 2009-12-29 04:43:12.630  2009     12            6  
    7274 2009-12-29 04:44:12.660  2009     12            8  
    7275 2009-12-29 04:45:12.700  2009     12           10  
    7276 2009-12-29 04:46:12.750  2009     12           12  
    7277 2009-12-29 04:47:12.810  2009     12           14  
    7278 2009-12-29 04:48:12.880  2009     12           16  
    7279 2009-12-29 04:49:12.960  2009     12           18  
    7280 2009-12-30 04:50:13.500  2009     12            0  
    7281 2009-12-30 04:51:13.500  2009     12            2  
    7282 2009-12-30 04:52:13.600  2009     12            4  
    7283 2009-12-30 04:53:13.800  2009     12            6  
    7284 2009-12-30 04:54:13.110  2009     12            8  
    7285 2009-12-30 04:55:13.150  2009     12           10  
    7286 2009-12-30 04:56:13.200  2009     12           12  
    7287 2009-12-30 04:57:13.260  2009     12           14  
    7288 2009-12-30 04:58:13.330  2009     12           16  
    7289 2009-12-30 04:59:13.410  2009     12           18  
    7290 2009-12-31 05:00:13.500  2009     12            0  
    7291 2009-12-31 05:01:13.500  2009     12            2  
    7292 2009-12-31 05:02:13.510  2009     12            4  
    7293 2009-12-31 05:03:13.530  2009     12            6  
    7294 2009-12-31 05:04:13.560  2009     12            8  
    7295 2009-12-31 05:05:13.600  2009     12           10  
    7296 2009-12-31 05:06:13.650  2009     12           12  
    7297 2009-12-31 05:07:13.710  2009     12           14  
    7298 2009-12-31 05:08:13.780  2009     12           16  
    7299 2009-12-31 05:09:13.860  2009     12           18  
    
    [7300 rows x 14 columns]



In more complicated projections involving joins, we may need to refer to
all of the columns in a same at once. This is how ``add_column`` works.
We just pass the whole table in the projection:

.. code:: python

    table.select([table, bigger_expr]).limit(5)




.. parsed-literal::

            id bool_col  tinyint_col  smallint_col  int_col  bigint_col  \
    0     4550     True            0             0        0           0   
    1     4551    False            1             1        1          10   
    2     4552     True            2             2        2          20   
    3     4553    False            3             3        3          30   
    4     4554     True            4             4        4          40   
    5     4555    False            5             5        5          50   
    6     4556     True            6             6        6          60   
    7     4557    False            7             7        7          70   
    8     4558     True            8             8        8          80   
    9     4559    False            9             9        9          90   
    10    4560     True            0             0        0           0   
    11    4561    False            1             1        1          10   
    12    4562     True            2             2        2          20   
    13    4563    False            3             3        3          30   
    14    4564     True            4             4        4          40   
    15    4565    False            5             5        5          50   
    16    4566     True            6             6        6          60   
    17    4567    False            7             7        7          70   
    18    4568     True            8             8        8          80   
    19    4569    False            9             9        9          90   
    20    4570     True            0             0        0           0   
    21    4571    False            1             1        1          10   
    22    4572     True            2             2        2          20   
    23    4573    False            3             3        3          30   
    24    4574     True            4             4        4          40   
    25    4575    False            5             5        5          50   
    26    4576     True            6             6        6          60   
    27    4577    False            7             7        7          70   
    28    4578     True            8             8        8          80   
    29    4579    False            9             9        9          90   
    ...    ...      ...          ...           ...      ...         ...   
    7270  3620     True            0             0        0           0   
    7271  3621    False            1             1        1          10   
    7272  3622     True            2             2        2          20   
    7273  3623    False            3             3        3          30   
    7274  3624     True            4             4        4          40   
    7275  3625    False            5             5        5          50   
    7276  3626     True            6             6        6          60   
    7277  3627    False            7             7        7          70   
    7278  3628     True            8             8        8          80   
    7279  3629    False            9             9        9          90   
    7280  3630     True            0             0        0           0   
    7281  3631    False            1             1        1          10   
    7282  3632     True            2             2        2          20   
    7283  3633    False            3             3        3          30   
    7284  3634     True            4             4        4          40   
    7285  3635    False            5             5        5          50   
    7286  3636     True            6             6        6          60   
    7287  3637    False            7             7        7          70   
    7288  3638     True            8             8        8          80   
    7289  3639    False            9             9        9          90   
    7290  3640     True            0             0        0           0   
    7291  3641    False            1             1        1          10   
    7292  3642     True            2             2        2          20   
    7293  3643    False            3             3        3          30   
    7294  3644     True            4             4        4          40   
    7295  3645    False            5             5        5          50   
    7296  3646     True            6             6        6          60   
    7297  3647    False            7             7        7          70   
    7298  3648     True            8             8        8          80   
    7299  3649    False            9             9        9          90   
    
          float_col  double_col date_string_col string_col  \
    0           0.0         0.0        04/01/10          0   
    1           1.1        10.1        04/01/10          1   
    2           2.2        20.2        04/01/10          2   
    3           3.3        30.3        04/01/10          3   
    4           4.4        40.4        04/01/10          4   
    5           5.5        50.5        04/01/10          5   
    6           6.6        60.6        04/01/10          6   
    7           7.7        70.7        04/01/10          7   
    8           8.8        80.8        04/01/10          8   
    9           9.9        90.9        04/01/10          9   
    10          0.0         0.0        04/02/10          0   
    11          1.1        10.1        04/02/10          1   
    12          2.2        20.2        04/02/10          2   
    13          3.3        30.3        04/02/10          3   
    14          4.4        40.4        04/02/10          4   
    15          5.5        50.5        04/02/10          5   
    16          6.6        60.6        04/02/10          6   
    17          7.7        70.7        04/02/10          7   
    18          8.8        80.8        04/02/10          8   
    19          9.9        90.9        04/02/10          9   
    20          0.0         0.0        04/03/10          0   
    21          1.1        10.1        04/03/10          1   
    22          2.2        20.2        04/03/10          2   
    23          3.3        30.3        04/03/10          3   
    24          4.4        40.4        04/03/10          4   
    25          5.5        50.5        04/03/10          5   
    26          6.6        60.6        04/03/10          6   
    27          7.7        70.7        04/03/10          7   
    28          8.8        80.8        04/03/10          8   
    29          9.9        90.9        04/03/10          9   
    ...         ...         ...             ...        ...   
    7270        0.0         0.0        12/29/09          0   
    7271        1.1        10.1        12/29/09          1   
    7272        2.2        20.2        12/29/09          2   
    7273        3.3        30.3        12/29/09          3   
    7274        4.4        40.4        12/29/09          4   
    7275        5.5        50.5        12/29/09          5   
    7276        6.6        60.6        12/29/09          6   
    7277        7.7        70.7        12/29/09          7   
    7278        8.8        80.8        12/29/09          8   
    7279        9.9        90.9        12/29/09          9   
    7280        0.0         0.0        12/30/09          0   
    7281        1.1        10.1        12/30/09          1   
    7282        2.2        20.2        12/30/09          2   
    7283        3.3        30.3        12/30/09          3   
    7284        4.4        40.4        12/30/09          4   
    7285        5.5        50.5        12/30/09          5   
    7286        6.6        60.6        12/30/09          6   
    7287        7.7        70.7        12/30/09          7   
    7288        8.8        80.8        12/30/09          8   
    7289        9.9        90.9        12/30/09          9   
    7290        0.0         0.0        12/31/09          0   
    7291        1.1        10.1        12/31/09          1   
    7292        2.2        20.2        12/31/09          2   
    7293        3.3        30.3        12/31/09          3   
    7294        4.4        40.4        12/31/09          4   
    7295        5.5        50.5        12/31/09          5   
    7296        6.6        60.6        12/31/09          6   
    7297        7.7        70.7        12/31/09          7   
    7298        8.8        80.8        12/31/09          8   
    7299        9.9        90.9        12/31/09          9   
    
                   timestamp_col  year  month  bigger_ints  
    0    2010-04-01 00:00:00.000  2010      4            0  
    1    2010-04-01 00:01:00.000  2010      4            2  
    2    2010-04-01 00:02:00.100  2010      4            4  
    3    2010-04-01 00:03:00.300  2010      4            6  
    4    2010-04-01 00:04:00.600  2010      4            8  
    5    2010-04-01 00:05:00.100  2010      4           10  
    6    2010-04-01 00:06:00.150  2010      4           12  
    7    2010-04-01 00:07:00.210  2010      4           14  
    8    2010-04-01 00:08:00.280  2010      4           16  
    9    2010-04-01 00:09:00.360  2010      4           18  
    10   2010-04-02 00:10:00.450  2010      4            0  
    11   2010-04-02 00:11:00.450  2010      4            2  
    12   2010-04-02 00:12:00.460  2010      4            4  
    13   2010-04-02 00:13:00.480  2010      4            6  
    14   2010-04-02 00:14:00.510  2010      4            8  
    15   2010-04-02 00:15:00.550  2010      4           10  
    16   2010-04-02 00:16:00.600  2010      4           12  
    17   2010-04-02 00:17:00.660  2010      4           14  
    18   2010-04-02 00:18:00.730  2010      4           16  
    19   2010-04-02 00:19:00.810  2010      4           18  
    20   2010-04-03 00:20:00.900  2010      4            0  
    21   2010-04-03 00:21:00.900  2010      4            2  
    22   2010-04-03 00:22:00.910  2010      4            4  
    23   2010-04-03 00:23:00.930  2010      4            6  
    24   2010-04-03 00:24:00.960  2010      4            8  
    25   2010-04-03 00:25:01.000  2010      4           10  
    26   2010-04-03 00:26:01.500  2010      4           12  
    27   2010-04-03 00:27:01.110  2010      4           14  
    28   2010-04-03 00:28:01.180  2010      4           16  
    29   2010-04-03 00:29:01.260  2010      4           18  
    ...                      ...   ...    ...          ...  
    7270 2009-12-29 04:40:12.600  2009     12            0  
    7271 2009-12-29 04:41:12.600  2009     12            2  
    7272 2009-12-29 04:42:12.610  2009     12            4  
    7273 2009-12-29 04:43:12.630  2009     12            6  
    7274 2009-12-29 04:44:12.660  2009     12            8  
    7275 2009-12-29 04:45:12.700  2009     12           10  
    7276 2009-12-29 04:46:12.750  2009     12           12  
    7277 2009-12-29 04:47:12.810  2009     12           14  
    7278 2009-12-29 04:48:12.880  2009     12           16  
    7279 2009-12-29 04:49:12.960  2009     12           18  
    7280 2009-12-30 04:50:13.500  2009     12            0  
    7281 2009-12-30 04:51:13.500  2009     12            2  
    7282 2009-12-30 04:52:13.600  2009     12            4  
    7283 2009-12-30 04:53:13.800  2009     12            6  
    7284 2009-12-30 04:54:13.110  2009     12            8  
    7285 2009-12-30 04:55:13.150  2009     12           10  
    7286 2009-12-30 04:56:13.200  2009     12           12  
    7287 2009-12-30 04:57:13.260  2009     12           14  
    7288 2009-12-30 04:58:13.330  2009     12           16  
    7289 2009-12-30 04:59:13.410  2009     12           18  
    7290 2009-12-31 05:00:13.500  2009     12            0  
    7291 2009-12-31 05:01:13.500  2009     12            2  
    7292 2009-12-31 05:02:13.510  2009     12            4  
    7293 2009-12-31 05:03:13.530  2009     12            6  
    7294 2009-12-31 05:04:13.560  2009     12            8  
    7295 2009-12-31 05:05:13.600  2009     12           10  
    7296 2009-12-31 05:06:13.650  2009     12           12  
    7297 2009-12-31 05:07:13.710  2009     12           14  
    7298 2009-12-31 05:08:13.780  2009     12           16  
    7299 2009-12-31 05:09:13.860  2009     12           18  
    
    [7300 rows x 14 columns]



To use constants in projections, we have to use a special
``ibis.literal`` function

.. code:: python

    foo_constant = ibis.literal(5).name('foo')
    table.select([table.bigint_col, foo_constant]).limit(5)




.. parsed-literal::

          bigint_col  foo
    0              0    5
    1             10    5
    2             20    5
    3             30    5
    4             40    5
    5             50    5
    6             60    5
    7             70    5
    8             80    5
    9             90    5
    10             0    5
    11            10    5
    12            20    5
    13            30    5
    14            40    5
    15            50    5
    16            60    5
    17            70    5
    18            80    5
    19            90    5
    20             0    5
    21            10    5
    22            20    5
    23            30    5
    24            40    5
    25            50    5
    26            60    5
    27            70    5
    28            80    5
    29            90    5
    ...          ...  ...
    7270           0    5
    7271          10    5
    7272          20    5
    7273          30    5
    7274          40    5
    7275          50    5
    7276          60    5
    7277          70    5
    7278          80    5
    7279          90    5
    7280           0    5
    7281          10    5
    7282          20    5
    7283          30    5
    7284          40    5
    7285          50    5
    7286          60    5
    7287          70    5
    7288          80    5
    7289          90    5
    7290           0    5
    7291          10    5
    7292          20    5
    7293          30    5
    7294          40    5
    7295          50    5
    7296          60    5
    7297          70    5
    7298          80    5
    7299          90    5
    
    [7300 rows x 2 columns]



Joins
=====

Ibis attempts to provide good support for all the standard relational
joins supported by Impala, Hive, and other relational databases.

-  inner, outer, left, right joins
-  semi and anti-joins

To illustrate the joins we'll use the TPC-H tables for now

.. code:: python

    region = con.table('tpch_region')
    nation = con.table('tpch_nation')
    customer = con.table('tpch_customer')
    lineitem = con.table('tpch_lineitem')

``region`` and ``nation`` are connected by their respective
``regionkey`` columns

.. code:: python

    join_expr = region.r_regionkey == nation.n_regionkey
    joined = region.inner_join(nation, join_expr)

If you have multiple join conditions, either compose them yourself (like
filters) or pass a list to the join function

::

    join_exprs = [cond1, cond2, cond3]
    joined = table1.inner_join(table2, join_exprs)

Once you've joined tables, you don't necessarily have anything yet. I'll
put it in big letters

Joins are declarations of intent
================================

After calling the join function (which validates the join condition, of
course), you may perform any number of other operations:

-  Aggregation
-  Projection
-  Filtering

and so forth. Most importantly, depending on your schemas, the joined
tables may include overlapping column names that could create a conflict
if not addressed directly. Some other systems, like pandas, handle this
by applying suffixes to the overlapping column names and computing the
fully joined tables immediately. We don't do this.

So, with the above data, suppose we just want the region name and all
the nation table data. We can then make a projection on the joined
reference:

.. code:: python

    table_ref = joined[nation, region.r_name.name('region')]
    table_ref.columns




.. parsed-literal::

    ['n_nationkey', 'n_name', 'n_regionkey', 'n_comment', 'region']



.. code:: python

    table_ref.limit(5)




.. parsed-literal::

        n_nationkey          n_name  n_regionkey  \
    0             0         ALGERIA            0   
    1             1       ARGENTINA            1   
    2             2          BRAZIL            1   
    3             3          CANADA            1   
    4             4           EGYPT            4   
    5             5        ETHIOPIA            0   
    6             6          FRANCE            3   
    7             7         GERMANY            3   
    8             8           INDIA            2   
    9             9       INDONESIA            2   
    10           10            IRAN            4   
    11           11            IRAQ            4   
    12           12           JAPAN            2   
    13           13          JORDAN            4   
    14           14           KENYA            0   
    15           15         MOROCCO            0   
    16           16      MOZAMBIQUE            0   
    17           17            PERU            1   
    18           18           CHINA            2   
    19           19         ROMANIA            3   
    20           20    SAUDI ARABIA            4   
    21           21         VIETNAM            2   
    22           22          RUSSIA            3   
    23           23  UNITED KINGDOM            3   
    24           24   UNITED STATES            1   
    
                                                n_comment       region  
    0    haggle. carefully final deposits detect slyly...       AFRICA  
    1   al foxes promise slyly according to the regula...      AMERICA  
    2   y alongside of the pending deposits. carefully...      AMERICA  
    3   eas hang ironic, silent packages. slyly regula...      AMERICA  
    4   y above the carefully unusual theodolites. fin...  MIDDLE EAST  
    5                     ven packages wake quickly. regu       AFRICA  
    6              refully final requests. regular, ironi       EUROPE  
    7   l platelets. regular accounts x-ray: unusual, ...       EUROPE  
    8   ss excuses cajole slyly across the packages. d...         ASIA  
    9    slyly express asymptotes. regular deposits ha...         ASIA  
    10  efully alongside of the slyly final dependenci...  MIDDLE EAST  
    11  nic deposits boost atop the quickly final requ...  MIDDLE EAST  
    12               ously. final, express gifts cajole a         ASIA  
    13  ic deposits are blithely about the carefully r...  MIDDLE EAST  
    14   pending excuses haggle furiously deposits. pe...       AFRICA  
    15  rns. blithely bold courts among the closely re...       AFRICA  
    16      s. ironic, unusual asymptotes wake blithely r       AFRICA  
    17  platelets. blithely pending dependencies use f...      AMERICA  
    18  c dependencies. furiously express notornis sle...         ASIA  
    19  ular asymptotes are about the furious multipli...       EUROPE  
    20  ts. silent requests haggle. closely express pa...  MIDDLE EAST  
    21     hely enticingly express accounts. even, final          ASIA  
    22   requests against the platelets use never acco...       EUROPE  
    23  eans boost carefully special requests. account...       EUROPE  
    24  y final packages. slow foxes cajole quickly. q...      AMERICA  



.. code:: python

    agged = table_ref.aggregate([table_ref.n_name.count().name('nrows')], by=['region'])
    agged




.. parsed-literal::

            region  nrows
    0       EUROPE      5
    1      AMERICA      5
    2  MIDDLE EAST      5
    3         ASIA      5
    4       AFRICA      5



Things like ``group_by`` work with unmaterialized joins, too, as you
would hope.

.. code:: python

    joined.group_by(region.r_name).size()




.. parsed-literal::

            r_name  count
    0       AFRICA      5
    1  MIDDLE EAST      5
    2      AMERICA      5
    3         ASIA      5
    4       EUROPE      5



Explicit join materialization
=============================

If you're lucky enough to have two table schemas with no overlapping
column names (lucky you!), the join can be *materialized* without having
to perform some other relational algebra operation:

::

    joined = a.inner_join(b, join_expr).materialize()

Note that this is equivalent to doing

::

    joined = a.join(b)[a, b]

i.e., joining and then selecting all columns from both joined tables. If
there is a name overlap, just like with the equivalent projection, there
will be an immediate error.

Writing down join keys
======================

In addition to having explicit comparison expressions as join keys, you
can also write down column names, or use expressions referencing the
joined tables, e.g.:

::

    joined = a.join(b, [('a_key1', 'b_key2')])

    joined2 = a.join(b, [(left_expr, right_expr)])

    joined3 = a.join(b, ['common_key'])

These will be compared for equality when performing the join; if you
want non-equality conditions in the join, you will have to form those
yourself.

Join referential nuances
========================

There's nothing to stop you from doing many joins in succession, and, in
fact, with complex schemas it will be to your advantage to build the
joined table references for your analysis first, then reuse the objects
as you go:

::

    joined_ref = (a.join(b, a.key1 == b.key2)
                   .join(c, [a.key3 == c.key4, b.key5 == c.key6]))

Note that, at least right now, you need to provide explicit comparison
expressions (or tuples of column references) referencing the joined
tables.

Aggregating joined table with metrics involving more than one base reference
============================================================================

Let's consider the case similar to the SQL query

::

    SELECT a.key, sum(a.foo - b.bar) AS metric
    FROM a
      JOIN b
        ON a.key = b.key
    GROUP BY 1

I'll use a somewhat contrived example using the data we already have to
show you what this looks like. Take the ``functional.alltypes`` table,
and suppose we want to compute the **mean absolute deviation (MAD) from
the hourly mean of the double\_col**. Silly, I know, but bear with me.

First, the hourly mean:

.. code:: python

    table = con.table('functional_alltypes')
    
    hour_dim = table.timestamp_col.hour().name('hour')
    
    hourly_mean = (table.group_by(hour_dim)
                   .aggregate([table.double_col.mean().name('avg_double')]))
    hourly_mean




.. parsed-literal::

       hour  avg_double
    0     4       45.45
    1     2       45.45
    2     0       45.45
    3     3       45.45
    4     1       45.45
    5     5       45.45



Okay, great, now how about the MAD? The only trick here is that we can
form an aggregate metric from the two tables, and we then have to join
it later. Ibis **will not** figure out how to join the tables
automatically for us.

.. code:: python

    mad = (table.double_col - hourly_mean.avg_double).abs().mean().name('MAD')

This metric is only valid if used in the context of ``table`` joined
with ``hourly_mean``, so let's do that. Writing down the join condition
is seriously a matter of writing:

.. code:: python

    join_expr = hour_dim == hourly_mean.hour

Now let's compute the MAD grouped by ``string_col``

.. code:: python

    result = (table.inner_join(hourly_mean, join_expr)
              .group_by(table.string_col)
              .aggregate([mad]))
    result




.. parsed-literal::

      string_col    mad
    0          7  25.25
    1          6  15.15
    2          2  25.25
    3          4   5.05
    4          8  35.35
    5          0  45.45
    6          3  15.15
    7          5   5.05
    8          1  35.35
    9          9  45.45



Sorting
=======

Sorting tables works similarly to the SQL ``ORDER BY`` clause. We use
the ``sort_by`` function and pass one of the following:

-  Column names
-  Column expressions
-  One of these, with a False (descending order) or True (ascending
   order) qualifier

So, to sort by ``total`` in ascending order we write:

::

    table.sort_by('total')

or by ``key`` then by ``total`` in descending order

::

    table.sort_by(['key', ('total', False)])

For descending sort order, there is a convenience function ``desc``
which can wrap sort keys

::

    from ibis import desc
    table.sort_by(['key', desc(table.total)])

Here's a concrete example involving filters, custom grouping dimension,
and sorting

.. code:: python

    table = con.table('functional_alltypes')
    
    keys = ['string_col', (table.bigint_col > 40).ifelse('high', 'low').name('bigint_tier')]
    metrics = [table.double_col.sum().name('total')]
    
    agged = (table
             .filter(table.int_col < 8)
             .group_by(keys)
             .aggregate(metrics))
    
    sorted_agged = agged.sort_by(['bigint_tier', ('total', False)])
    sorted_agged




.. parsed-literal::

      string_col bigint_tier  total
    0          7        high  51611
    1          6        high  44238
    2          5        high  36865
    3          4         low  29492
    4          3         low  22119
    5          2         low  14746
    6          1         low   7373
    7          0         low      0



For sorting in descending order, you can use the special ``ibis.desc``
function:

.. code:: python

    agged.sort_by(ibis.desc('total'))




.. parsed-literal::

      string_col bigint_tier  total
    0          7        high  51611
    1          6        high  44238
    2          5        high  36865
    3          4         low  29492
    4          3         low  22119
    5          2         low  14746
    6          1         low   7373
    7          0         low      0


