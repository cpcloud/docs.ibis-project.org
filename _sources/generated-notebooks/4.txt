
.. code:: python

    import ibis
    import os
    hdfs_port = os.environ.get('IBIS_WEBHDFS_PORT', 50070)
    
    ic = ibis.impala_connect(host='quickstart.cloudera', database='ibis_testing')
    hdfs = ibis.hdfs_connect(host='quickstart.cloudera', port=hdfs_port)
    con = ibis.make_client(ic, hdfs_client=hdfs)
    
    ibis.options.interactive = True

Creating new Impala tables from Ibis expressions
================================================

Suppose you have an Ibis expression that produces a table:

.. code:: python

    table = con.table('functional_alltypes')
    
    t2 = table[table, (table.bigint_col - table.int_col).name('foo')]
    
    expr = (t2
            [t2.bigint_col > 30]
            .group_by('string_col')
            .aggregate([t2.foo.min().name('min_foo'),
                        t2.foo.max().name('max_foo'),
                        t2.foo.sum().name('sum_foo')]))
    expr




.. parsed-literal::

      string_col  min_foo  max_foo  sum_foo
    0          6       54       54    39420
    1          4       36       36    26280
    2          7       63       63    45990
    3          8       72       72    52560
    4          5       45       45    32850
    5          9       81       81    59130



To create a table in the database from the results of this expression,
use the connection's ``create_table`` method:

.. code:: python

    con.create_table('testing_table', expr, database='ibis_testing')

By default, this creates a table stored as **Parquet format** in HDFS.
Support for views, external tables, configurable file formats, and so
forth, will come in the future. Feedback on what kind of interface would
be useful for that would help.

.. code:: python

    con.table('testing_table')




.. parsed-literal::

      string_col  min_foo  max_foo  sum_foo
    0          8       72       72    52560
    1          5       45       45    32850
    2          9       81       81    59130
    3          6       54       54    39420
    4          4       36       36    26280
    5          7       63       63    45990



Tables can be similarly dropped with ``drop_table``

.. code:: python

    con.drop_table('testing_table', database='ibis_testing')

Inserting data into existing Impala tables
==========================================

The client's ``insert`` method can append new data to an existing table
or overwrite the data that is in there.

.. code:: python

    con.create_table('testing_table', expr)
    con.table('testing_table')




.. parsed-literal::

      string_col  min_foo  max_foo  sum_foo
    0          9       81       81    59130
    1          8       72       72    52560
    2          5       45       45    32850
    3          6       54       54    39420
    4          4       36       36    26280
    5          7       63       63    45990



.. code:: python

    con.insert('testing_table', expr)
    con.table('testing_table')




.. parsed-literal::

       string_col  min_foo  max_foo  sum_foo
    0           9       81       81    59130
    1           6       54       54    39420
    2           4       36       36    26280
    3           7       63       63    45990
    4           9       81       81    59130
    5           8       72       72    52560
    6           5       45       45    32850
    7           8       72       72    52560
    8           5       45       45    32850
    9           6       54       54    39420
    10          4       36       36    26280
    11          7       63       63    45990



.. code:: python

    con.drop_table('testing_table')

Uploading / downloading data from HDFS
======================================

If you've set up an HDFS connection, you can use the Ibis HDFS interface
to look through your data and read and write files to and from HDFS:

.. code:: python

    hdfs = con.hdfs
    hdfs.ls('/__ibis/ibis-testing-data')




.. parsed-literal::

    [u'/__ibis/ibis-testing-data/avro',
     u'/__ibis/ibis-testing-data/csv',
     u'/__ibis/ibis-testing-data/parquet',
     u'/__ibis/ibis-testing-data/udf']



.. code:: python

    hdfs.ls('/__ibis/ibis-testing-data/parquet')




.. parsed-literal::

    [u'/__ibis/ibis-testing-data/parquet/functional_alltypes',
     u'/__ibis/ibis-testing-data/parquet/tpch_ctas_cancel',
     u'/__ibis/ibis-testing-data/parquet/tpch_customer',
     u'/__ibis/ibis-testing-data/parquet/tpch_lineitem',
     u'/__ibis/ibis-testing-data/parquet/tpch_nation',
     u'/__ibis/ibis-testing-data/parquet/tpch_orders',
     u'/__ibis/ibis-testing-data/parquet/tpch_part',
     u'/__ibis/ibis-testing-data/parquet/tpch_partsupp',
     u'/__ibis/ibis-testing-data/parquet/tpch_region',
     u'/__ibis/ibis-testing-data/parquet/tpch_supplier']



Suppose we wanted to download
``/__ibis/ibis-testing-data/parquet/functional_alltypes``, which is a
directory. We need only do:

.. code:: python

    !rm -rf parquet_dir/
    hdfs.get('/__ibis/ibis-testing-data/parquet/functional_alltypes', 'parquet_dir')




.. parsed-literal::

    'parquet_dir'



Now we have that directory locally:

.. code:: python

    !ls parquet_dir/


.. parsed-literal::

    e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq
    e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq
    e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq


Files and directories can be written to HDFS just as easily using
``put``:

.. code:: python

    path = '/__ibis/dir-write-example'
    if hdfs.exists(path):
        hdfs.rmdir(path)
    hdfs.put(path, 'parquet_dir', verbose=True)


.. parsed-literal::

    WARNING:hdfs.client:<InsecureClient(url=http://quickstart.cloudera:5070, root=None)> :: [404] /webhdfs/v1/__ibis/dir-write-example?user.name=wesm&op=GETFILESTATUS:
    {"RemoteException":{"exception":"FileNotFoundException","javaClassName":"java.io.FileNotFoundException","message":"File does not exist: /__ibis/dir-write-example"}}
    WARNING:hdfs.client:<InsecureClient(url=http://quickstart.cloudera:5070, root=None)> :: [404] /webhdfs/v1/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq?user.name=wesm&op=GETFILESTATUS:
    {"RemoteException":{"exception":"FileNotFoundException","javaClassName":"java.io.FileNotFoundException","message":"File does not exist: /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq"}}
    WARNING:hdfs.client:<InsecureClient(url=http://quickstart.cloudera:5070, root=None)> :: [404] /webhdfs/v1/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq?user.name=wesm&op=LISTSTATUS:
    {"RemoteException":{"exception":"FileNotFoundException","javaClassName":"java.io.FileNotFoundException","message":"File /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq does not exist."}}
    WARNING:hdfs.client:<InsecureClient(url=http://quickstart.cloudera:5070, root=None)> :: [404] /webhdfs/v1/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq?user.name=wesm&op=GETFILESTATUS:
    {"RemoteException":{"exception":"FileNotFoundException","javaClassName":"java.io.FileNotFoundException","message":"File does not exist: /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq"}}


.. parsed-literal::

    Writing local parquet_dir/e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq to HDFS /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq
    Writing local parquet_dir/e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq to HDFS /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq

.. parsed-literal::

    WARNING:hdfs.client:<InsecureClient(url=http://quickstart.cloudera:5070, root=None)> :: [404] /webhdfs/v1/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq?user.name=wesm&op=LISTSTATUS:
    {"RemoteException":{"exception":"FileNotFoundException","javaClassName":"java.io.FileNotFoundException","message":"File /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq does not exist."}}
    WARNING:hdfs.client:<InsecureClient(url=http://quickstart.cloudera:5070, root=None)> :: [404] /webhdfs/v1/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq?user.name=wesm&op=GETFILESTATUS:
    {"RemoteException":{"exception":"FileNotFoundException","javaClassName":"java.io.FileNotFoundException","message":"File does not exist: /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq"}}


.. parsed-literal::

    
    Writing local parquet_dir/e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq to HDFS /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq

.. parsed-literal::

    WARNING:hdfs.client:<InsecureClient(url=http://quickstart.cloudera:5070, root=None)> :: [404] /webhdfs/v1/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq?user.name=wesm&op=LISTSTATUS:
    {"RemoteException":{"exception":"FileNotFoundException","javaClassName":"java.io.FileNotFoundException","message":"File /__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq does not exist."}}


.. parsed-literal::

    


.. code:: python

    hdfs.ls('/__ibis/dir-write-example')




.. parsed-literal::

    [u'/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ab_722308252_data.0.parq',
     u'/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ac_722308252_data.0.parq',
     u'/__ibis/dir-write-example/e54d1a51b57207fb-757fe03770d6a8ad_1611361036_data.0.parq']



Delete files with ``rm`` or directories with ``rmdir``:

.. code:: python

    hdfs.rmdir('/__ibis/dir-write-example')

.. code:: python

    !rm -rf parquet_dir/

Queries on Parquet, Avro, and Delimited files in HDFS
=====================================================

Ibis can easily create temporary or persistent Impala tables that
reference data in the following formats:

-  Parquet (``parquet_file``)
-  Avro (``avro_file``)
-  Delimited text formats (CSV, TSV, etc.) (``delimited_file``)

Parquet is the easiest because the schema can be read from the data
files:

.. code:: python

    path = '/__ibis/ibis-testing-data/parquet/tpch_lineitem'
    
    lineitem = con.parquet_file(path)
    lineitem.limit(2)




.. parsed-literal::

          l_orderkey  l_partkey  l_suppkey  l_linenumber l_quantity  \
    0              1     155190       7706             1      17.00   
    1              1      67310       7311             2      36.00   
    2              1      63700       3701             3       8.00   
    3              1       2132       4633             4      28.00   
    4              1      24027       1534             5      24.00   
    5              1      15635        638             6      32.00   
    6              2     106170       1191             1      38.00   
    7              3       4297       1798             1      45.00   
    8              3      19036       6540             2      49.00   
    9              3     128449       3474             3      27.00   
    10             3      29380       1883             4       2.00   
    11             3     183095        650             5      28.00   
    12             3      62143       9662             6      26.00   
    13             4      88035       5560             1      30.00   
    14             5     108570       8571             1      15.00   
    15             5     123927       3928             2      26.00   
    16             5      37531         35             3      50.00   
    17             6     139636       2150             1      37.00   
    18             7     182052       9607             1      12.00   
    19             7     145243       7758             2       9.00   
    20             7      94780       9799             3      46.00   
    21             7     163073       3074             4      28.00   
    22             7     151894       9440             5      38.00   
    23             7      79251       1759             6      35.00   
    24             7     157238       2269             7       5.00   
    25            32      82704       7721             1      28.00   
    26            32     197921        441             2      32.00   
    27            32      44161       6666             3       2.00   
    28            32       2743       7744             4       4.00   
    29            32      85811       8320             5      44.00   
    ...          ...        ...        ...           ...        ...   
    9970        5858     160181       5214             5      18.00   
    9971        5858     153937       8968             6       7.00   
    9972        5858      10709       3211             7      50.00   
    9973        5859     174988         23             1      50.00   
    9974        5859       8773       6274             2      17.00   
    9975        5859      45701       8206             3      33.00   
    9976        5859      92269       2270             4      40.00   
    9977        5859     152689       7720             5      35.00   
    9978        5859      43446       3447             6       9.00   
    9979        5859     190127       7685             7      27.00   
    9980        5860      50168       7684             1      10.00   
    9981        5861     190867       8425             1      32.00   
    9982        5861      85611        628             2       6.00   
    9983        5862     112061       4573             1       4.00   
    9984        5862       1334       6335             2      29.00   
    9985        5863     160562       3079             1      45.00   
    9986        5863     159369       1885             2      21.00   
    9987        5888      61291       8810             1      46.00   
    9988        5888     111595       1596             2      24.00   
    9989        5889      76129       8637             1      17.00   
    9990        5890     112221       2222             1      38.00   
    9991        5891      84905       4906             1      22.00   
    9992        5891     185580       8099             2       9.00   
    9993        5891      29674       4679             3      10.00   
    9994        5892     147722       7723             1       7.00   
    9995        5892     149926       7469             2      37.00   
    9996        5892       2064       2065             3      28.00   
    9997        5892      74798       4799             4      23.00   
    9998        5893     133707       1247             1      43.00   
    9999        5893       1868       9369             2       2.00   
    
         l_extendedprice l_discount l_tax l_returnflag l_linestatus  l_shipdate  \
    0           21168.23       0.04  0.02            N            O  1996-03-13   
    1           45983.16       0.09  0.06            N            O  1996-04-12   
    2           13309.60       0.10  0.02            N            O  1996-01-29   
    3           28955.64       0.09  0.06            N            O  1996-04-21   
    4           22824.48       0.10  0.04            N            O  1996-03-30   
    5           49620.16       0.07  0.02            N            O  1996-01-30   
    6           44694.46       0.00  0.05            N            O  1997-01-28   
    7           54058.05       0.06  0.00            R            F  1994-02-02   
    8           46796.47       0.10  0.00            R            F  1993-11-09   
    9           39890.88       0.06  0.07            A            F  1994-01-16   
    10           2618.76       0.01  0.06            A            F  1993-12-04   
    11          32986.52       0.04  0.00            R            F  1993-12-14   
    12          28733.64       0.10  0.02            A            F  1993-10-29   
    13          30690.90       0.03  0.08            N            O  1996-01-10   
    14          23678.55       0.02  0.04            R            F  1994-10-31   
    15          50723.92       0.07  0.08            R            F  1994-10-16   
    16          73426.50       0.08  0.03            A            F  1994-08-08   
    17          61998.31       0.08  0.03            A            F  1992-04-27   
    18          13608.60       0.07  0.03            N            O  1996-05-07   
    19          11594.16       0.08  0.08            N            O  1996-02-01   
    20          81639.88       0.10  0.07            N            O  1996-01-15   
    21          31809.96       0.03  0.04            N            O  1996-03-21   
    22          73943.82       0.08  0.01            N            O  1996-02-11   
    23          43058.75       0.06  0.03            N            O  1996-01-16   
    24           6476.15       0.04  0.02            N            O  1996-02-10   
    25          47227.60       0.05  0.08            N            O  1995-10-23   
    26          64605.44       0.02  0.00            N            O  1995-08-14   
    27           2210.32       0.09  0.02            N            O  1995-08-07   
    28           6582.96       0.09  0.03            N            O  1995-08-04   
    29          79059.64       0.05  0.06            N            O  1995-08-28   
    ...              ...        ...   ...          ...          ...         ...   
    9970        22341.24       0.00  0.07            A            F  1992-11-05   
    9971        13936.51       0.04  0.00            A            F  1992-09-14   
    9972        80985.00       0.06  0.00            R            F  1992-07-20   
    9973       103149.00       0.07  0.01            N            O  1997-07-08   
    9974        28590.09       0.03  0.03            N            O  1997-05-15   
    9975        54341.10       0.10  0.04            N            O  1997-07-08   
    9976        50450.40       0.09  0.02            N            O  1997-08-05   
    9977        60958.80       0.00  0.08            N            O  1997-05-28   
    9978        12504.96       0.01  0.02            N            O  1997-06-15   
    9979        32862.24       0.05  0.08            N            O  1997-07-30   
    9980        11181.60       0.04  0.04            A            F  1992-03-11   
    9981        62651.52       0.00  0.03            N            O  1997-05-27   
    9982         9579.66       0.10  0.03            N            O  1997-07-28   
    9983         4292.24       0.09  0.06            N            O  1997-06-04   
    9984        35824.57       0.03  0.05            N            O  1997-04-02   
    9985        73015.20       0.07  0.06            A            F  1993-12-19   
    9986        29995.56       0.09  0.03            R            F  1994-01-13   
    9987        57605.34       0.02  0.00            N            O  1996-11-18   
    9988        38558.16       0.03  0.01            N            O  1996-11-07   
    9989        18787.04       0.09  0.02            N            O  1995-07-01   
    9990        46862.36       0.01  0.08            A            F  1993-02-14   
    9991        41577.80       0.00  0.06            R            F  1993-01-01   
    9992        14990.22       0.03  0.07            R            F  1993-01-20   
    9993        16036.70       0.08  0.01            A            F  1993-04-14   
    9994        12388.04       0.02  0.03            N            O  1995-06-26   
    9995        73109.04       0.09  0.06            N            O  1995-08-12   
    9996        27049.68       0.03  0.06            N            O  1995-08-16   
    9997        40774.17       0.08  0.04            R            F  1995-05-18   
    9998        74850.10       0.05  0.02            R            F  1992-11-02   
    9999         3539.72       0.10  0.04            R            F  1992-07-18   
    
         l_commitdate l_receiptdate     l_shipinstruct l_shipmode  \
    0      1996-02-12    1996-03-22  DELIVER IN PERSON      TRUCK   
    1      1996-02-28    1996-04-20   TAKE BACK RETURN       MAIL   
    2      1996-03-05    1996-01-31   TAKE BACK RETURN    REG AIR   
    3      1996-03-30    1996-05-16               NONE        AIR   
    4      1996-03-14    1996-04-01               NONE        FOB   
    5      1996-02-07    1996-02-03  DELIVER IN PERSON       MAIL   
    6      1997-01-14    1997-02-02   TAKE BACK RETURN       RAIL   
    7      1994-01-04    1994-02-23               NONE        AIR   
    8      1993-12-20    1993-11-24   TAKE BACK RETURN       RAIL   
    9      1993-11-22    1994-01-23  DELIVER IN PERSON       SHIP   
    10     1994-01-07    1994-01-01               NONE      TRUCK   
    11     1994-01-10    1994-01-01   TAKE BACK RETURN        FOB   
    12     1993-12-18    1993-11-04   TAKE BACK RETURN       RAIL   
    13     1995-12-14    1996-01-18  DELIVER IN PERSON    REG AIR   
    14     1994-08-31    1994-11-20               NONE        AIR   
    15     1994-09-25    1994-10-19               NONE        FOB   
    16     1994-10-13    1994-08-26  DELIVER IN PERSON        AIR   
    17     1992-05-15    1992-05-02   TAKE BACK RETURN      TRUCK   
    18     1996-03-13    1996-06-03   TAKE BACK RETURN        FOB   
    19     1996-03-02    1996-02-19   TAKE BACK RETURN       SHIP   
    20     1996-03-27    1996-02-03        COLLECT COD       MAIL   
    21     1996-04-08    1996-04-20               NONE        FOB   
    22     1996-02-24    1996-02-18  DELIVER IN PERSON      TRUCK   
    23     1996-02-23    1996-01-22   TAKE BACK RETURN        FOB   
    24     1996-03-26    1996-02-13               NONE        FOB   
    25     1995-08-27    1995-10-26   TAKE BACK RETURN      TRUCK   
    26     1995-10-07    1995-08-27        COLLECT COD        AIR   
    27     1995-10-07    1995-08-23  DELIVER IN PERSON        AIR   
    28     1995-10-01    1995-09-03               NONE    REG AIR   
    29     1995-08-20    1995-09-14  DELIVER IN PERSON        AIR   
    ...           ...           ...                ...        ...   
    9970   1992-10-08    1992-12-03               NONE      TRUCK   
    9971   1992-10-01    1992-10-01   TAKE BACK RETURN       RAIL   
    9972   1992-10-07    1992-07-25               NONE      TRUCK   
    9973   1997-06-20    1997-07-27        COLLECT COD       MAIL   
    9974   1997-06-30    1997-05-26  DELIVER IN PERSON        AIR   
    9975   1997-06-22    1997-07-18   TAKE BACK RETURN      TRUCK   
    9976   1997-06-17    1997-08-20               NONE    REG AIR   
    9977   1997-07-14    1997-06-15        COLLECT COD      TRUCK   
    9978   1997-06-06    1997-06-20               NONE       RAIL   
    9979   1997-07-08    1997-08-08               NONE       MAIL   
    9980   1992-03-30    1992-03-31               NONE       MAIL   
    9981   1997-05-29    1997-05-28   TAKE BACK RETURN       MAIL   
    9982   1997-05-18    1997-08-24   TAKE BACK RETURN      TRUCK   
    9983   1997-04-26    1997-06-19               NONE      TRUCK   
    9984   1997-04-16    1997-04-04               NONE        FOB   
    9985   1994-01-25    1994-01-05               NONE    REG AIR   
    9986   1994-01-09    1994-01-28  DELIVER IN PERSON        FOB   
    9987   1996-11-05    1996-12-08   TAKE BACK RETURN        FOB   
    9988   1996-11-30    1996-11-20        COLLECT COD       SHIP   
    9989   1995-08-12    1995-07-25               NONE        AIR   
    9990   1992-12-09    1993-02-27        COLLECT COD        FOB   
    9991   1993-02-18    1993-01-14  DELIVER IN PERSON      TRUCK   
    9992   1993-02-27    1993-02-10        COLLECT COD    REG AIR   
    9993   1993-02-07    1993-04-15  DELIVER IN PERSON       RAIL   
    9994   1995-07-18    1995-07-25        COLLECT COD        AIR   
    9995   1995-06-11    1995-09-05               NONE    REG AIR   
    9996   1995-07-06    1995-08-22  DELIVER IN PERSON       MAIL   
    9997   1995-07-06    1995-05-29        COLLECT COD       MAIL   
    9998   1992-09-27    1992-11-21   TAKE BACK RETURN       RAIL   
    9999   1992-09-10    1992-08-12               NONE       RAIL   
    
                                            l_comment  
    0                         egular courts above the  
    1              ly final dependencies: slyly bold   
    2                   riously. regular, express dep  
    3                         lites. fluffily even de  
    4                         pending foxes. slyly re  
    5                               arefully slyly ex  
    6                 ven requests. deposits breach a  
    7             ongside of the furiously brave acco  
    8                           unusual accounts. eve  
    9                                nal foxes wake.   
    10                          y. fluffily pending d  
    11                         ages nag slyly pending  
    12                      ges sleep after the caref  
    13         - quickly regular packages sleep. idly  
    14                             ts wake furiously   
    15          sts use slyly quickly special instruc  
    16                    eodolites. fluffily unusual  
    17                      p furiously special foxes  
    18                 ss pinto beans wake against th  
    19                               es. instructions  
    20                                 unusual reques  
    21                 . slyly special requests haggl  
    22        ns haggle carefully ironic deposits. bl  
    23     jole. excuses wake carefully alongside of   
    24                                  ithely regula  
    25                             sleep quickly. req  
    26            lithely regular deposits. fluffily   
    27         express accounts wake according to the  
    28                              e slyly final pac  
    29     symptotes nag according to the ironic depo  
    ...                                           ...  
    9970                             al excuses. bold  
    9971                               dly pending ac  
    9972                              r the ironic ex  
    9973              ly regular deposits use. ironic  
    9974      ly ironic requests. quickly unusual pin  
    9975     eposits unwind furiously final pinto bea  
    9976                                 l dependenci  
    9977                                  egular acco  
    9978                ges boost quickly. blithely r  
    9979                                    across th  
    9980      ual patterns try to eat carefully above  
    9981     nt asymptotes. carefully express request  
    9982                                olites. slyly  
    9983                           yly silent deposit  
    9984                        e fluffily. furiously  
    9985                              deposits are ab  
    9986                    atelets nag blithely furi  
    9987                       yly final accounts hag  
    9988                               ing to the spe  
    9989               blithely pending packages. flu  
    9990         accounts. carefully final asymptotes  
    9991         iresias cajole deposits. special, ir  
    9992                            cajole carefully   
    9993                            nding requests. b  
    9994        e furiously. quickly even deposits da  
    9995                        maintain. bold, expre  
    9996   ithely unusual accounts will have to integ  
    9997                foxes nag slyly about the qui  
    9998  s. regular courts above the carefully silen  
    9999                              ckages wake sly  
    
    [10000 rows x 16 columns]



.. code:: python

    lineitem.l_extendedprice.sum()




.. parsed-literal::

    Decimal('229577310901.20')



If you want to query a Parquet file and also create a table in Impala
that remains after your session, you can pass more information to
``parquet_file``:

.. code:: python

    table = con.parquet_file(path, name='my_parquet_table', 
                             database='ibis_testing',
                             persist=True)
    table.l_extendedprice.sum()




.. parsed-literal::

    Decimal('229577310901.20')



.. code:: python

    con.table('my_parquet_table').l_extendedprice.sum()




.. parsed-literal::

    Decimal('229577310901.20')



.. code:: python

    con.drop_table('my_parquet_table')

To query delimited files, you need to write down an Ibis schema. At some
point we'd like to build some helper tools that will infer the schema
for you, all in good time.

There's some CSV files in the test folder, so let's use those:

.. code:: python

    hdfs.get('/__ibis/ibis-testing-data/csv', 'csv-files')




.. parsed-literal::

    'csv-files'



.. code:: python

    !cat csv-files/0.csv


.. parsed-literal::

    dNmzRWWCKJ,0.558914329982219,42
    kpXp9U5Kv4,-0.8221358158299105,28
    7BcTT5B4wp,-1.2180159173981855,18
    W4vOjjJQrT,-1.7791277450782457,45
    tiVZsQWzpN,0.32936255878849235,84
    6ibbcK16f2,-0.36602855877465035,56
    QBsUQwKw0Z,0.1206123669383656,29
    FMp2sWNgaY,-0.015090055989338344,27
    UPXjybUQSj,0.42642200098179384,77
    L2f2ylNoIw,-0.5091003484680737,6


.. code:: python

    !rm -rf csv-files/

The schema here is pretty simple (see ``ibis.schema`` for more):

.. code:: python

    schema = ibis.schema([('foo', 'string'),
                          ('bar', 'double'),
                          ('baz', 'int32')])
    
    table = con.delimited_file('/__ibis/ibis-testing-data/csv',
                               schema)
    table.limit(10)




.. parsed-literal::

               foo       bar  baz
    0   dNmzRWWCKJ  0.558914   42
    1   kpXp9U5Kv4 -0.822136   28
    2   7BcTT5B4wp -1.218016   18
    3   W4vOjjJQrT -1.779128   45
    4   tiVZsQWzpN  0.329363   84
    5   6ibbcK16f2 -0.366029   56
    6   QBsUQwKw0Z  0.120612   29
    7   FMp2sWNgaY -0.015090   27
    8   UPXjybUQSj  0.426422   77
    9   L2f2ylNoIw -0.509100    6
    10  dNmzRWWCKJ  0.558914   42
    11  kpXp9U5Kv4 -0.822136   28
    12  7BcTT5B4wp -1.218016   18
    13  W4vOjjJQrT -1.779128   45
    14  tiVZsQWzpN  0.329363   84
    15  6ibbcK16f2 -0.366029   56
    16  QBsUQwKw0Z  0.120612   29
    17  FMp2sWNgaY -0.015090   27
    18  UPXjybUQSj  0.426422   77
    19  L2f2ylNoIw -0.509100    6
    20  dNmzRWWCKJ  0.558914   42
    21  kpXp9U5Kv4 -0.822136   28
    22  7BcTT5B4wp -1.218016   18
    23  W4vOjjJQrT -1.779128   45
    24  tiVZsQWzpN  0.329363   84
    25  6ibbcK16f2 -0.366029   56
    26  QBsUQwKw0Z  0.120612   29
    27  FMp2sWNgaY -0.015090   27
    28  UPXjybUQSj  0.426422   77
    29  L2f2ylNoIw -0.509100    6
    ..         ...       ...  ...
    70  dNmzRWWCKJ  0.558914   42
    71  kpXp9U5Kv4 -0.822136   28
    72  7BcTT5B4wp -1.218016   18
    73  W4vOjjJQrT -1.779128   45
    74  tiVZsQWzpN  0.329363   84
    75  6ibbcK16f2 -0.366029   56
    76  QBsUQwKw0Z  0.120612   29
    77  FMp2sWNgaY -0.015090   27
    78  UPXjybUQSj  0.426422   77
    79  L2f2ylNoIw -0.509100    6
    80  dNmzRWWCKJ  0.558914   42
    81  kpXp9U5Kv4 -0.822136   28
    82  7BcTT5B4wp -1.218016   18
    83  W4vOjjJQrT -1.779128   45
    84  tiVZsQWzpN  0.329363   84
    85  6ibbcK16f2 -0.366029   56
    86  QBsUQwKw0Z  0.120612   29
    87  FMp2sWNgaY -0.015090   27
    88  UPXjybUQSj  0.426422   77
    89  L2f2ylNoIw -0.509100    6
    90  dNmzRWWCKJ  0.558914   42
    91  kpXp9U5Kv4 -0.822136   28
    92  7BcTT5B4wp -1.218016   18
    93  W4vOjjJQrT -1.779128   45
    94  tiVZsQWzpN  0.329363   84
    95  6ibbcK16f2 -0.366029   56
    96  QBsUQwKw0Z  0.120612   29
    97  FMp2sWNgaY -0.015090   27
    98  UPXjybUQSj  0.426422   77
    99  L2f2ylNoIw -0.509100    6
    
    [100 rows x 3 columns]



.. code:: python

    table.bar.summary()




.. parsed-literal::

       count  nulls       min       max        sum      mean  approx_nunique
    0    100      0 -1.779128  0.558914 -32.741872 -0.327419              10



For functions like ``parquet_file`` and ``delimited_file``, an HDFS
directory must be passed (we'll add support for S3 and other filesystems
later) and the directory must contain files all having the same schema.

If you have Avro data, you can query it too if you have the full avro
schema:

.. code:: python

    avro_schema = {
        "fields": [
            {"type": ["int", "null"], "name": "R_REGIONKEY"},
            {"type": ["string", "null"], "name": "R_NAME"},
            {"type": ["string", "null"], "name": "R_COMMENT"}],
        "type": "record",
        "name": "a"
    }
    
    table = con.avro_file('/__ibis/ibis-testing-data/avro/tpch.region', avro_schema)
    table




.. parsed-literal::

    Empty DataFrame
    Columns: [r_regionkey, r_name, r_comment]
    Index: []



Other helper functions for interacting with the database
========================================================

We're adding a growing list of useful utility functions for interacting
with an Impala cluster on the client object. The idea is that you should
be able to do any database-admin-type work with Ibis and not have to
switch over to the Impala SQL shell. Any ways we can make this more
pleasant, please let us know.

Here's some of the features, which we'll give examples for:

-  Listing and searching for available databases and tables
-  Creating and dropping databases
-  Getting table schemas

.. code:: python

    con.list_databases(like='ibis*')




.. parsed-literal::

    ['ibis_testing']



.. code:: python

    con.list_tables(database='ibis_testing', like='tpch*')




.. parsed-literal::

    ['tpch_ctas_cancel',
     'tpch_customer',
     'tpch_lineitem',
     'tpch_nation',
     'tpch_orders',
     'tpch_part',
     'tpch_partsupp',
     'tpch_region',
     'tpch_region_avro',
     'tpch_supplier']



.. code:: python

    schema = con.get_schema('functional_alltypes')
    schema




.. parsed-literal::

    ibis.Schema {  
      id               int32
      bool_col         boolean
      tinyint_col      int8
      smallint_col     int16
      int_col          int32
      bigint_col       int64
      float_col        float
      double_col       double
      date_string_col  string
      string_col       string
      timestamp_col    timestamp
      year             int32
      month            int32
    }



Databases can be created, too, and you can set the storage path in HDFS
you want for the data files

.. code:: python

    db = 'ibis_testing2'
    con.create_database(db, path='/__ibis/my-test-database')
    con.create_table('example_table', con.table('functional_alltypes'),
                     database=db)

Hopefully, there will be data files in the indicated spot in HDFS:

.. code:: python

    hdfs.ls('/__ibis/my-test-database')




.. parsed-literal::

    [u'/__ibis/my-test-database/example_table']



To drop a database, including all tables in it, you can use
``drop_database`` with ``force=True``:

.. code:: python

    con.drop_database(db, force=True)

Dealing with Partitioned tables in Impala
=========================================

**Placeholder:** This is not yet implemented. If you have use cases,
please let us know.

Faster queries on small data in Impala
======================================

Since Impala internally uses LLVM to compile parts of queries (aka
"codegen") to make them faster on large data sets there is a certain
amount of overhead with running many kinds of queries, even on small
datasets. You can disable LLVM code generation when using Ibis, which
may significantly speed up queries on smaller datasets:

.. code:: python

    from numpy.random import rand

.. code:: python

    con.disable_codegen()

.. code:: python

    t = con.table('ibis_testing.functional_alltypes')
    
    %timeit (t.double_col + rand()).sum().execute()


.. parsed-literal::

    10 loops, best of 3: 139 ms per loop


.. code:: python

    # Turn codegen back on
    con.disable_codegen(False)

.. code:: python

    %timeit (t.double_col + rand()).sum().execute()


.. parsed-literal::

    1 loops, best of 3: 1.69 s per loop


It's important to remember that codegen is a fixed overhead and will
significantly speed up queries on big data
